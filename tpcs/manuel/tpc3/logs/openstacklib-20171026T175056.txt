17:50:56.470 [main] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] init
17:50:56.675 [main] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] project p-nit exists
17:50:56.677 [main] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:50:56.880 [main] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:50:57.088 [main] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] init
17:50:57.279 [main] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] project p-nit exists
17:50:57.285 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] init
17:50:57.480 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] project p-nit exists
17:50:57.482 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:50:57.651 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:00.616 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:00.753 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:01.541 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - networkExists] init
17:51:02.016 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - networkExists] network n-nit exists
17:51:02.017 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - subnetExists] init
17:51:02.135 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - subnetExists] subnet s4-nit exists
17:51:02.137 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - subnetExists] init
17:51:02.253 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - subnetExists] subnet s6-nit exists
17:51:02.256 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - routerExists] init
17:51:02.354 [Thread-0] DEBUG openstacklib.Abstrato - [abstractExists - routerExists] router r-nit exists
17:51:02.355 [Thread-0] DEBUG openstacklib.Router - [addRouterInterfaces] init
17:51:02.357 [Thread-0] DEBUG openstacklib.Subnet - [getSubnetID] getSubnetID init
17:51:02.359 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getSubnetID] init
17:51:02.436 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getSubnetID] subnet s4-nit exists with id b38f6079-e4a3-4405-9662-cc4647ceea5a
17:51:02.441 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getRouterID] init
17:51:02.507 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getRouterID] router r-nit exists with id 748ed1f9-b551-475c-9eb7-a724ad469042
17:51:02.671 [Thread-0] DEBUG openstacklib.Router - [addRouterInterfaces] init
17:51:02.671 [Thread-0] DEBUG openstacklib.Subnet - [getSubnetID] getSubnetID init
17:51:02.673 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getSubnetID] init
17:51:03.209 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getSubnetID] subnet s6-nit exists with id c9f3989c-3863-4641-9621-f8c563bf6280
17:51:03.211 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getRouterID] init
17:51:03.316 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getRouterID] router r-nit exists with id 748ed1f9-b551-475c-9eb7-a724ad469042
17:51:03.495 [Thread-0] DEBUG openstacklib.SecurityGroup - [createSecurityGroupRule] init
17:51:03.495 [Thread-0] DEBUG openstacklib.SecurityGroup - [getSecurityGroupID]  init
17:51:03.497 [Thread-0] DEBUG openstacklib.Abstrato - [getIDs - getSecurityGroupID] init
17:51:03.498 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:03.683 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:04.256 [Thread-0] DEBUG openstacklib.Abstrato - [getIDs - getSecurityGroupID] project p-nit have this security-groups List(b6b6b5ae-fd4c-4140-a51b-abc9435f470e)
17:51:04.257 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:04.429 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:04.567 [Thread-0] DEBUG openstacklib.SecurityGroup - [createSecurityGroupRule] Security Group Rule with securityGroupID b6b6b5ae-fd4c-4140-a51b-abc9435f470e,project p-nit(3fd8578d590c49e89f76a08a4f385d7d), EtherType IPv4, remote-ip-prefix 0.0.0.0/0,protocol icmp created successfully
17:51:04.568 [Thread-0] DEBUG openstacklib.SecurityGroup - [createSecurityGroupRule] init
17:51:04.568 [Thread-0] DEBUG openstacklib.SecurityGroup - [getSecurityGroupID]  init
17:51:04.569 [Thread-0] DEBUG openstacklib.Abstrato - [getIDs - getSecurityGroupID] init
17:51:04.569 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:04.763 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:04.857 [Thread-0] DEBUG openstacklib.Abstrato - [getIDs - getSecurityGroupID] project p-nit have this security-groups List(b6b6b5ae-fd4c-4140-a51b-abc9435f470e)
17:51:04.857 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:04.988 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:05.130 [Thread-0] DEBUG openstacklib.SecurityGroup - [createSecurityGroupRule] Security Group Rule with securityGroupID b6b6b5ae-fd4c-4140-a51b-abc9435f470e,project p-nit(3fd8578d590c49e89f76a08a4f385d7d), EtherType IPv4, Port-Range-Min 22,Port-Range-Max 22, remote-ip-prefix 0.0.0.0/0,protocol tcp created successfully
17:51:05.133 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:05.334 [Thread-0] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:05.401 [Thread-0] DEBUG openstacklib.Dns - [zoneExists] init
17:51:05.410 [Thread-0] ERROR openstacklib.Template - [TrueFalseTemplate]
getMessage: 
designate.tp.dsi.tecnico.ulisboa.pt
getLocalizedMessage: 
designate.tp.dsi.tecnico.ulisboa.pt 
StackTrace: 
()
[EXCEPTION toString] java.net.UnknownHostException: designate.tp.dsi.tecnico.ulisboa.pt
java.net.UnknownHostException: designate.tp.dsi.tecnico.ulisboa.pt
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:432)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:527)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:211)
	at sun.net.www.http.HttpClient.New(HttpClient.java:308)
	at sun.net.www.http.HttpClient.New(HttpClient.java:326)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1202)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1138)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1032)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:966)
	at scalaj.http.DefaultConnectFunc$.apply(Http.scala:471)
	at scalaj.http.DefaultConnectFunc$.apply(Http.scala:469)
	at scalaj.http.HttpRequest.scalaj$http$HttpRequest$$doConnection(Http.scala:355)
	at scalaj.http.HttpRequest.exec(Http.scala:335)
	at scalaj.http.HttpRequest.asString(Http.scala:455)
	at openstacklib.Request.get(Request.scala:123)
	at openstacklib.Dns$$anonfun$zoneExists$1.apply$mcV$sp(Dns.scala:166)
	at openstacklib.Template.TrueFalseTemplate(Template.scala:13)
	at openstacklib.Dns.zoneExists(Dns.scala:165)
	at openstacklib.Command$$anonfun$createAllBase$1.apply$mcV$sp(Command.scala:154)
	at openstacklib.Template.ErrorGoodTemplate(Template.scala:39)
	at openstacklib.Command.createAllBase(Command.scala:114)
	at openstacklib.TecnicoOpenStack$$anonfun$createAllRegularProject$2.apply(TecnicoOpenStack.scala:123)
	at openstacklib.TecnicoOpenStack$$anonfun$createAllRegularProject$2.apply(TecnicoOpenStack.scala:121)
	at scala.collection.mutable.ArraySeq.foreach(ArraySeq.scala:74)
	at openstacklib.TecnicoOpenStack.createAllRegularProject(TecnicoOpenStack.scala:121)
	at openstackcli.Main$$anonfun$7.apply$mcV$sp(Main.scala:341)
	at openstackcli.Cli$$anon$1.run(Cli.scala:100)
17:51:05.411 [Thread-0] ERROR openstacklib.Template - [ErrorGoodTemplate]
getMessage: 
designate.tp.dsi.tecnico.ulisboa.pt
getLocalizedMessage: 
designate.tp.dsi.tecnico.ulisboa.pt 
StackTrace: 
()
[EXCEPTION toString] java.net.UnknownHostException: designate.tp.dsi.tecnico.ulisboa.pt
java.net.UnknownHostException: designate.tp.dsi.tecnico.ulisboa.pt
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:432)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:527)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:211)
	at sun.net.www.http.HttpClient.New(HttpClient.java:308)
	at sun.net.www.http.HttpClient.New(HttpClient.java:326)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1202)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1138)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1032)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:966)
	at scalaj.http.DefaultConnectFunc$.apply(Http.scala:471)
	at scalaj.http.DefaultConnectFunc$.apply(Http.scala:469)
	at scalaj.http.HttpRequest.scalaj$http$HttpRequest$$doConnection(Http.scala:355)
	at scalaj.http.HttpRequest.exec(Http.scala:335)
	at scalaj.http.HttpRequest.asString(Http.scala:455)
	at openstacklib.Request.get(Request.scala:123)
	at openstacklib.Dns$$anonfun$zoneExists$1.apply$mcV$sp(Dns.scala:166)
	at openstacklib.Template.TrueFalseTemplate(Template.scala:13)
	at openstacklib.Dns.zoneExists(Dns.scala:165)
	at openstacklib.Command$$anonfun$createAllBase$1.apply$mcV$sp(Command.scala:154)
	at openstacklib.Template.ErrorGoodTemplate(Template.scala:39)
	at openstacklib.Command.createAllBase(Command.scala:114)
	at openstacklib.TecnicoOpenStack$$anonfun$createAllRegularProject$2.apply(TecnicoOpenStack.scala:123)
	at openstacklib.TecnicoOpenStack$$anonfun$createAllRegularProject$2.apply(TecnicoOpenStack.scala:121)
	at scala.collection.mutable.ArraySeq.foreach(ArraySeq.scala:74)
	at openstacklib.TecnicoOpenStack.createAllRegularProject(TecnicoOpenStack.scala:121)
	at openstackcli.Main$$anonfun$7.apply$mcV$sp(Main.scala:341)
	at openstackcli.Cli$$anon$1.run(Cli.scala:100)
17:51:05.412 [Thread-2] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] init
17:51:05.613 [Thread-2] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] project p-nit exists
17:51:05.613 [Thread-2] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:05.784 [Thread-2] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:05.993 [Thread-4] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] init
17:51:06.171 [Thread-4] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] project p-nit exists
17:51:06.355 [Thread-4] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:06.531 [Thread-4] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:06.895 [Thread-6] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] init
17:51:07.067 [Thread-6] DEBUG openstacklib.Abstrato - [abstractExists - projectExists] project p-nit exists
17:51:07.070 [Thread-6] DEBUG openstacklib.User - [generateUserToProject]  user vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh was generated
17:51:07.273 [Thread-6] DEBUG openstacklib.User - [generateUserToProject]  user vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh created in 0b6962ec81e0435fb311ca37a741e911 domain
17:51:07.273 [Thread-6] DEBUG openstacklib.User - [addUserProject]  init
17:51:07.274 [Thread-6] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:07.627 [Thread-6] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:07.627 [Thread-6] DEBUG openstacklib.User - [userExists] init
17:51:07.842 [Thread-6] DEBUG openstacklib.User - [userExists] user vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh exists
17:51:08.599 [Thread-6] DEBUG openstacklib.User - [addUserProject]  user vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh (82d3571d40654e36a74e991bedeb59c5) added in the project p-nit (3fd8578d590c49e89f76a08a4f385d7d) with role ef5274ea2c4346ba89f755e46c49bc8f
17:51:08.599 [Thread-6] DEBUG openstacklib.User - [generateUserToProject]  user vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh added in the project p-nit
17:51:08.600 [Thread-6] DEBUG openstacklib.Abstrato - [getID - getProjectID] init
17:51:08.736 [Thread-6] DEBUG openstacklib.Abstrato - [getID - getProjectID] project p-nit exists with id 3fd8578d590c49e89f76a08a4f385d7d
17:51:09.162 [Thread-6] ERROR openstacklib.Template - [ErrorGoodTemplate] 
Cause: null
Code: 500
Message: 
(postNoAuth)  Code Request 500
Headers: Map(Connection -> Vector(close), Content-Length -> Vector(194219), Content-Type -> Vector(text/html; charset=UTF-8), Date -> Vector(Thu, 26 Oct 2017 16:49:35 GMT), Server -> Vector(Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5), Status -> Vector(HTTP/1.1 500 Internal Server Error), Vary -> Vector(Cookie), X-Frame-Options -> Vector(SAMEORIGIN))
Body:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>IntegrityError at /project/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#666; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em;}
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
  </style>
  
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\-");
        var oRegExp = new RegExp("(^|\s)" + strClassName + "(\s|$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
      hideAll(getElementsByClassName(document, 'div', 'pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
    //-->
  </script>
  
</head>
<body>
<div id="summary">
  <h1>IntegrityError at /project/</h1>
  <pre class="exception_value">(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>https://quantum.tp.dsi.tecnico.ulisboa.pt/project/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>1.10.5</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>IntegrityError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py in defaulterrorhandler, line 36</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/usr/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>2.7.5</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#39;/var/repo/quantum-api/quantum&#39;,
 &#39;/var/repo/quantum-api&#39;,
 &#39;/usr/lib64/python27.zip&#39;,
 &#39;/usr/lib64/python2.7&#39;,
 &#39;/usr/lib64/python2.7/plat-linux2&#39;,
 &#39;/usr/lib64/python2.7/lib-tk&#39;,
 &#39;/usr/lib64/python2.7/lib-old&#39;,
 &#39;/usr/lib64/python2.7/lib-dynload&#39;,
 &#39;/usr/lib64/python2.7/site-packages&#39;,
 &#39;/usr/lib/python2.7/site-packages&#39;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Thu, 26 Oct 2017 16:49:35 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py</code> in <code>inner</code>

          
            <div class="context" id="c140416040014624">
              
                <ol start="32" class="pre-context" id="pre140416040014624">
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    This decorator is automatically applied to all middleware to ensure that</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    no middleware leaks an exception and that the next middleware in the stack</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    can rely on getting a response instead of an exception.</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    @wraps(get_response, assigned=available_attrs(get_response))</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    def inner(request):</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="39" class="context-line">
                <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>
            response = get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='40' class="post-context" id="post140416040014624">
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>            response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    return inner</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014624')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014624">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method WSGIHandler._legacy_get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_legacy_get_response</code>

          
            <div class="context" id="c140416040014552">
              
                <ol start="242" class="pre-context" id="pre140416040014552">
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        # Apply request middleware</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        for middleware_method in self._request_middleware:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            response = middleware_method(request)</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="249" class="context-line">
                <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>
            response = self._get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='250' class="post-context" id="post140416040014552">
                  
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        return response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014552')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014552">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method SecurityMiddleware.process_request of &lt;django.middleware.security.SecurityMiddleware object at 0x7fb52d1582d0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014480">
              
                <ol start="180" class="pre-context" id="pre140416040014480">
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            except Exception as e:</pre></li>
                
                </ol>
              
              <ol start="187" class="context-line">
                <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>
                response = self.process_exception_by_middleware(e, request)</pre> <span>...</span></li></ol>
              
                <ol start='188' class="post-context" id="post140416040014480">
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                view_name = callback.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            else:                                           # CBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014480')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014480">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014408">
              
                <ol start="178" class="pre-context" id="pre140416040014408">
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            response = middleware_method(request, callback, callback_args, callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="185" class="context-line">
                <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>
                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='186' class="post-context" id="post140416040014408">
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014408')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014408">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py</code> in <code>wrapped_view</code>

          
            <div class="context" id="c140416040014336">
              
                <ol start="51" class="pre-context" id="pre140416040014336">
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    Marks a view function as being exempt from the CSRF view protection.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # We could just do view_func.csrf_exempt = True, but decorators</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # are nicer if they don&#39;t have side-effects, so we return a new</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # function.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="58" class="context-line">
                <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>
        return view_func(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='59' class="post-context" id="post140416040014336">
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014336')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014336">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/project/&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c140&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/viewsets.py</code> in <code>view</code>

          
            <div class="context" id="c140416040014264">
              
                <ol start="76" class="pre-context" id="pre140416040014264">
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # Bind methods to actions</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # This is the bit that&#39;s different to a standard view</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            for method, action in actions.items():</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                handler = getattr(self, action)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                setattr(self, method, handler)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # And continue as usual</pre></li>
                
                </ol>
              
              <ol start="83" class="context-line">
                <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>
            return self.dispatch(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='84' class="post-context" id="post140416040014264">
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # and possible attributes set by decorators</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # like csrf_exempt from dispatch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014264')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014264">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>action</td>
                    <td class="code"><pre>u&#39;list&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>actions</td>
                    <td class="code"><pre>{u&#39;get&#39;: u&#39;list&#39;, u&#39;post&#39;: u&#39;create&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.views.ProjectViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.list of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{u&#39;suffix&#39;: u&#39;List&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>method</td>
                    <td class="code"><pre>u&#39;get&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014192">
              
                <ol start="476" class="pre-context" id="pre140416040014192">
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="483" class="context-line">
                <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>
            response = self.handle_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='484' class="post-context" id="post140416040014192">
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>handle_exception</code>

          
            <div class="context" id="c140416040014120">
              
                <ol start="436" class="pre-context" id="pre140416040014120">
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        exception_handler = self.get_exception_handler()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        context = self.get_exception_handler_context()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response = exception_handler(exc, context)</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="443" class="context-line">
                <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>
            self.raise_uncaught_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='444' class="post-context" id="post140416040014120">
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response.exception = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if settings.DEBUG:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014120')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014120">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{u&#39;args&#39;: (),
 u&#39;kwargs&#39;: {},
 u&#39;request&#39;: &lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;,
 u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception_handler</td>
                    <td class="code"><pre>&lt;function exception_handler at 0x7fb52d572050&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014048">
              
                <ol start="473" class="pre-context" id="pre140416040014048">
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>
            response = handler(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='481' class="post-context" id="post140416040014048">
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014048')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014048">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>create</code>

          
            <div class="context" id="c140416040013976">
              
                <ol start="14" class="pre-context" id="pre140416040013976">
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>class CreateModelMixin(object):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    Create a model instance.</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                </ol>
              
              <ol start="21" class="context-line">
                <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>
        self.perform_create(serializer)</pre> <span>...</span></li></ol>
              
                <ol start='22' class="post-context" id="post140416040013976">
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def perform_create(self, serializer):</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.save()</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013976')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013976">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>perform_create</code>

          
            <div class="context" id="c140416040013904">
              
                <ol start="19" class="pre-context" id="pre140416040013904">
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        self.perform_create(serializer)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def perform_create(self, serializer):</pre></li>
                
                </ol>
              
              <ol start="26" class="context-line">
                <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>
        serializer.save()</pre> <span>...</span></li></ol>
              
                <ol start='27' class="post-context" id="post140416040013904">
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def get_success_headers(self, data):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {&#39;Location&#39;: data[api_settings.URL_FIELD_NAME]}</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        except (TypeError, KeyError):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {}</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/serializers.py</code> in <code>save</code>

          
            <div class="context" id="c140416039976832">
              
                <ol start="207" class="pre-context" id="pre140416039976832">
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`update()` did not return an object instance.&#39;</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="214" class="context-line">
                <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>
            self.instance = self.create(validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='215' class="post-context" id="post140416039976832">
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`create()` did not return an object instance.&#39;</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976832')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976832">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/var/repo/quantum-api/quantum/api/serializers.py</code> in <code>create</code>

          
            <div class="context" id="c140416039974384">
              
                <ol start="69" class="pre-context" id="pre140416039974384">
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        regions_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        apikeys_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        project = Project.objects.filter(projectID=projectid).first()</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;regions&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            regions_data = validated_data.pop(&#39;regions&#39;)</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;apikeys&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            apikeys_data = validated_data.pop(&#39;apikeys&#39;)</pre></li>
                
                </ol>
              
              <ol start="76" class="context-line">
                <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>
        project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='77' class="post-context" id="post140416039974384">
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for apikey_data in apikeys_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Apikey.objects.update_or_create(project=project,**apikey_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for region_data in regions_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Region.objects.update_or_create(project=project,region=region_data.get(&#39;region&#39;),defaults=region_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        return project</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        </pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974384')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974384">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>apikeys_data</td>
                    <td class="code"><pre>[OrderedDict([(u&#39;api_user&#39;, u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;), (u&#39;api_key&#39;, u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;)])]</pre></td>
                  </tr>
                
                  <tr>
                    <td>project</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>projectid</td>
                    <td class="code"><pre>u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>regions_data</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039974312">
              
                <ol start="78" class="pre-context" id="pre140416039974312">
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039974312">
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974312')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974312">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;defaults&#39;: {u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;},
 &#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;update_or_create&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d610f10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>update_or_create</code>

          
            <div class="context" id="c140416039976760">
              
                <ol start="483" class="pre-context" id="pre140416039976760">
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        defaults = defaults or {}</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        lookup, params = self._extract_model_params(defaults, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            obj = self.get(**lookup)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        except self.model.DoesNotExist:</pre></li>
                
                </ol>
              
              <ol start="490" class="context-line">
                <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>
            obj, created = self._create_object_from_params(lookup, params)</pre> <span>...</span></li></ol>
              
                <ol start='491' class="post-context" id="post140416039976760">
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            if created:</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>                return obj, created</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        for k, v in six.iteritems(defaults):</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            setattr(obj, k, v)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        obj.save(using=self.db)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        return obj, False</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>defaults</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039976904">
              
                <ol start="506" class="pre-context" id="pre140416039976904">
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            return obj, True</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        except IntegrityError:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            exc_info = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                return self.get(**lookup), False</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            except self.model.DoesNotExist:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                pass</pre></li>
                
                </ol>
              
              <ol start="513" class="context-line">
                <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>
            six.reraise(*exc_info)</pre> <span>...</span></li></ol>
              
                <ol start='514' class="post-context" id="post140416039976904">
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>    def _extract_model_params(self, defaults, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        Prepares `lookup` (kwargs that are valid model attributes), `params`</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        (for creating a model instance) based on given kwargs; for use by</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        get_or_create and update_or_create.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039975536">
              
                <ol start="498" class="pre-context" id="pre140416039975536">
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>    def _create_object_from_params(self, lookup, params):</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Tries to create an object using passed params.</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Used by get_or_create and update_or_create</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            with transaction.atomic(using=self.db):</pre></li>
                
                </ol>
              
              <ol start="505" class="context-line">
                <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>
                obj = self.create(**params)</pre> <span>...</span></li></ol>
              
                <ol start='506' class="post-context" id="post140416039975536">
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            return obj, True</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        except IntegrityError:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            exc_info = sys.exc_info()</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            try:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>                return self.get(**lookup), False</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            except self.model.DoesNotExist:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975536')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975536">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>create</code>

          
            <div class="context" id="c140416039975464">
              
                <ol start="392" class="pre-context" id="pre140416039975464">
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def create(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        Creates a new object with the given kwargs, saving it to the database</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        and returning the created object.</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="399" class="context-line">
                <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>
        obj.save(force_insert=True, using=self.db)</pre> <span>...</span></li></ol>
              
                <ol start='400' class="post-context" id="post140416039975464">
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def _populate_pk_values(self, objs):</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        for obj in objs:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>            if obj.pk is None:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975464')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975464">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save</code>

          
            <div class="context" id="c140416039975392">
              
                <ol start="789" class="pre-context" id="pre140416039975392">
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                if not field.primary_key and not hasattr(field, &#39;through&#39;):</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                    field_names.add(field.attname)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            loaded_fields = field_names.difference(deferred_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        self.save_base(using=using, force_insert=force_insert,</pre></li>
                
                </ol>
              
              <ol start="796" class="context-line">
                <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>
                       force_update=force_update, update_fields=update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='797' class="post-context" id="post140416039975392">
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    save.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    def save_base(self, raw=False, force_insert=False,</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                  force_update=False, using=None, update_fields=None):</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        Handles the parts of saving which should be done only once per save,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975392')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975392">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>deferred_fields</td>
                    <td class="code"><pre>set()</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save_base</code>

          
            <div class="context" id="c140416039975320">
              
                <ol start="817" class="pre-context" id="pre140416039975320">
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        meta = cls._meta</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        if not meta.auto_created:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            signals.pre_save.send(sender=origin, instance=self, raw=raw, using=using,</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                                  update_fields=update_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        with transaction.atomic(using=using, savepoint=False):</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                self._save_parents(cls, using, update_fields)</pre></li>
                
                </ol>
              
              <ol start="824" class="context-line">
                <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>
            updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='825' class="post-context" id="post140416039975320">
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Store the database on which the object was saved</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.db = using</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Once saved, this is no longer a to-be-added instance.</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.adding = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Signal that the save is complete</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975320')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975320">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_save_table</code>

          
            <div class="context" id="c140416039975248">
              
                <ol start="901" class="pre-context" id="pre140416039975248">
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                self._order = order_value</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            fields = meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if not pk_set:</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                fields = [f for f in fields if not isinstance(f, AutoField)]</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            update_pk = bool(meta.has_auto_field and not pk_set)</pre></li>
                
                </ol>
              
              <ol start="908" class="context-line">
                <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>
            result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</pre> <span>...</span></li></ol>
              
                <ol start='909' class="post-context" id="post140416039975248">
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if update_pk:</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                setattr(self, meta.pk.attname, result)</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        return updated</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975248')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975248">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>f</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_do_insert</code>

          
            <div class="context" id="c140416039975176">
              
                <ol start="940" class="pre-context" id="pre140416039975176">
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def _do_insert(self, manager, using, fields, update_pk, raw):</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        Do an INSERT. If update_pk is defined then this method should return</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        the new pk for the model.</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        return manager._insert([self], fields=fields, return_id=update_pk,</pre></li>
                
                </ol>
              
              <ol start="947" class="context-line">
                <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>
                               using=using, raw=raw)</pre> <span>...</span></li></ol>
              
                <ol start='948' class="post-context" id="post140416039975176">
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def delete(self, using=None, keep_parents=False):</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        using = using or router.db_for_write(self.__class__, instance=self)</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        assert self._get_pk_val() is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            &quot;%s object can&#39;t be deleted because its %s attribute is set to None.&quot; %</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            (self._meta.object_name, self._meta.pk.attname)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975176')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975176">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039975104">
              
                <ol start="78" class="pre-context" id="pre140416039975104">
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039975104">
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975104')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975104">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;Project: Project object&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;fields&#39;: [&lt;django.db.models.fields.CharField: projectID&gt;,
            &lt;django.db.models.fields.DateTimeField: expires&gt;,
            &lt;django.db.models.fields.CharField: domainid&gt;,
            &lt;django.db.models.fields.CharField: centrocusto&gt;],
 &#39;raw&#39;: False,
 &#39;return_id&#39;: True,
 &#39;using&#39;: &#39;default&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;_insert&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_insert</code>

          
            <div class="context" id="c140416039975032">
              
                <ol start="1038" class="pre-context" id="pre140416039975032">
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        the InsertQuery class and is how Model.save() is implemented.</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        if using is None:</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>            using = self.db</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query = sql.InsertQuery(self.model)</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1045" class="context-line">
                <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>
        return query.get_compiler(using=using).execute_sql(return_id)</pre> <span>...</span></li></ol>
              
                <ol start='1046' class="post-context" id="post140416039975032">
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    def _batched_insert(self, objs, fields, batch_size):</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        A little helper method for bulk_insert to insert the bulk one batch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975032')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975032">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;Project: Project object&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0x7fb528303390&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py</code> in <code>execute_sql</code>

          
            <div class="context" id="c140416039974960">
              
                <ol start="1047" class="pre-context" id="pre140416039974960">
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        assert not (</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            return_id and len(self.query.objs) != 1 and</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            not self.connection.features.can_return_ids_from_bulk_insert</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        self.return_id = return_id</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            for sql, params in self.as_sql():</pre></li>
                
                </ol>
              
              <ol start="1054" class="context-line">
                <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>
                cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='1055' class="post-context" id="post140416039974960">
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if not (return_id and cursor):</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_ids_from_bulk_insert and len(self.query.objs) &gt; 1:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return self.connection.ops.fetch_returned_insert_ids(cursor)</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_id_from_insert:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                assert len(self.query.objs) == 1</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974960')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974960">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.compiler.SQLInsertCompiler object at 0x7fb528303790&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974888">
              
                <ol start="72" class="pre-context" id="pre140416039974888">
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>class CursorDebugWrapper(CursorWrapper):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    # XXX callproc isn&#39;t instrumented at this time.</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        start = time()</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="79" class="context-line">
                <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>
            return super(CursorDebugWrapper, self).execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='80' class="post-context" id="post140416039974888">
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        finally:</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            stop = time()</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            duration = stop - start</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            sql = self.db.ops.last_executed_query(self.cursor, sql, params)</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            self.db.queries_log.append({</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>                &#39;sql&#39;: sql,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974888')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974888">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>duration</td>
                    <td class="code"><pre>0.00045990943908691406</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>start</td>
                    <td class="code"><pre>1509036575.558545</pre></td>
                  </tr>
                
                  <tr>
                    <td>stop</td>
                    <td class="code"><pre>1509036575.559005</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974528">
              
                <ol start="57" class="pre-context" id="pre140416039974528">
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            if params is None:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>                return self.cursor.execute(sql)</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            else:</pre></li>
                
                </ol>
              
              <ol start="64" class="context-line">
                <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>
                return self.cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='65' class="post-context" id="post140416039974528">
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def executemany(self, sql, param_list):</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            return self.cursor.executemany(sql, param_list)</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974528')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974528">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974600">
              
                <ol start="108" class="pre-context" id="pre140416039974600">
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # args is None means no string interpolation</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.execute(query, args)</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                
                </ol>
              
              <ol start="115" class="context-line">
                <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>
                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre> <span>...</span></li></ol>
              
                <ol start='116' class="post-context" id="post140416039974600">
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            raise</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.executemany(query, args)</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974600')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974600">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974672">
              
                <ol start="103" class="pre-context" id="pre140416039974672">
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def __init__(self, cursor):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        self.cursor = cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def execute(self, query, args=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # args is None means no string interpolation</pre></li>
                
                </ol>
              
              <ol start="110" class="context-line">
                <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>
            return self.cursor.execute(query, args)</pre> <span>...</span></li></ol>
              
                <ol start='111' class="post-context" id="post140416039974672">
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        except Database.OperationalError as e:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974672')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974672">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974816">
              
                <ol start="198" class="pre-context" id="pre140416039974816">
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>                self.errorhandler(self, TypeError, m)</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except (SystemExit, KeyboardInterrupt):</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            raise</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except:</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            exc, value, tb = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            del tb</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            self.messages.append((exc, value))</pre></li>
                
                </ol>
              
              <ol start="205" class="context-line">
                <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>
            self.errorhandler(self, exc, value)</pre> <span>...</span></li></ol>
              
                <ol start='206' class="post-context" id="post140416039974816">
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        self._executed = query</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        if not self._defer_warnings: self._warning_check()</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        return r</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974816')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974816">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&lt;weakproxy at 0x7fb52d7f88e8 to Connection at 0x7fb5280dd5f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>item</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>r</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0x7fb5283037d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py</code> in <code>defaulterrorhandler</code>

          
            <div class="context" id="c140416039974744">
              
                <ol start="29" class="pre-context" id="pre140416039974744">
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    error = errorclass, errorvalue</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    if cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        cursor.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        connection.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del connection</pre></li>
                
                </ol>
              
              <ol start="36" class="context-line">
                <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>
    raise errorclass, errorvalue</pre> <span>...</span></li></ol>
              
                <ol start='37' class="post-context" id="post140416039974744">
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>re_numeric_part = re.compile(r&quot;^(\d+)&quot;)</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>def numeric_part(s):</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    &quot;&quot;&quot;Returns the leading numeric part of a string.</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974744')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974744">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>error</td>
                    <td class="code"><pre>(&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;,
 OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;))</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorclass</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorvalue</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="IntegrityError at /project/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: https://quantum.tp.dsi.tecnico.ulisboa.pt/project/

Django Version: 1.10.5
Python Version: 2.7.5
Installed Applications:
(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)
Installed Middleware:
(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)



Traceback:

File "/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py" in inner
  39.             response = get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _legacy_get_response
  249.             response = self._get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  187.                 response = self.process_exception_by_middleware(e, request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/viewsets.py" in view
  83.             return self.dispatch(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  483.             response = self.handle_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in handle_exception
  443.             self.raise_uncaught_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  480.             response = handler(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in create
  21.         self.perform_create(serializer)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in perform_create
  26.         serializer.save()

File "/usr/lib/python2.7/site-packages/rest_framework/serializers.py" in save
  214.             self.instance = self.create(validated_data)

File "/var/repo/quantum-api/quantum/api/serializers.py" in create
  76.         project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in update_or_create
  490.             obj, created = self._create_object_from_params(lookup, params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  513.             six.reraise(*exc_info)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  505.                 obj = self.create(**params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in create
  399.         obj.save(force_insert=True, using=self.db)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save
  796.                        force_update=force_update, update_fields=update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save_base
  824.             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _save_table
  908.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _do_insert
  947.                                using=using, raw=raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _insert
  1045.         return query.get_compiler(using=using).execute_sql(return_id)

File "/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py" in execute_sql
  1054.                 cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  79.             return super(CursorDebugWrapper, self).execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  64.                 return self.cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  115.                 six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  110.             return self.cursor.execute(query, args)

File "/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py" in execute
  205.             self.errorhandler(self, exc, value)

File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py" in defaulterrorhandler
  36.     raise errorclass, errorvalue

Exception Type: IntegrityError at /project/
Exception Value: (1048, &quot;Column &#39;expires&#39; cannot be null&quot;)
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>AnonymousUser</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#39;393&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#39;application/json&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_PREFIX</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>GATEWAY_INTERFACE</td>
          <td class="code"><pre>&#39;CGI/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#39;text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#39;gzip,deflate&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CHARSET</td>
          <td class="code"><pre>&#39;UTF-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#39;keep-alive&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#39;scalaj-http/1.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>u&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_TRANSLATED</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#39;172.20.15.146&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_PORT</td>
          <td class="code"><pre>&#39;50286&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#39;POST&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_SCHEME</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_URI</td>
          <td class="code"><pre>&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_FILENAME</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADDR</td>
          <td class="code"><pre>&#39;193.136.166.56&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADMIN</td>
          <td class="code"><pre>&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#39;HTTP/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SIGNATURE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#39;Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5&#39;</pre></td>
        </tr>
      
        <tr>
          <td>UNIQUE_ID</td>
          <td class="code"><pre>&#39;WfISH26EopjbHFjj@1hSKQAAAAo&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.application_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.callable_object</td>
          <td class="code"><pre>&#39;application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.enable_sendfile</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.handler_script</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.input_chunked</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_host</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_port</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.process_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.queue_start</td>
          <td class="code"><pre>&#39;1509036575543003&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.request_handler</td>
          <td class="code"><pre>&#39;wsgi-script&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.script_reloading</td>
          <td class="code"><pre>&#39;1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.version</td>
          <td class="code"><pre>(3, 4)</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;mod_wsgi.Log object at 0x7fb52812ba30&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;mod_wsgi.Input object at 0x7fb52d7f36f0&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>quantum.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#39;*&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[u&#39;django.contrib.auth.backends.ModelBackend&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>u&#39;auth.User&#39;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{u&#39;default&#39;: {u&#39;BACKEND&#39;: u&#39;django.core.cache.backends.locmem.LocMemCache&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;csrftoken&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>u&#39;django.views.csrf.csrf_failure&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>u&#39;HTTP_X_CSRFTOKEN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: False,
             &#39;AUTOCOMMIT&#39;: True,
             &#39;CONN_MAX_AGE&#39;: 0,
             &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
             &#39;HOST&#39;: &#39;localhost&#39;,
             &#39;NAME&#39;: &#39;quantumapi&#39;,
             &#39;OPTIONS&#39;: {&#39;init_command&#39;: &quot;SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;&quot;},
             &#39;PASSWORD&#39;: u&#39;********************&#39;,
             &#39;PORT&#39;: &#39;3306&#39;,
             &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                      &#39;COLLATION&#39;: None,
                      &#39;MIRROR&#39;: None,
                      &#39;NAME&#39;: None},
             &#39;TIME_ZONE&#39;: None,
             &#39;USER&#39;: &#39;root&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y, P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d %H:%M:%S&#39;,
 u&#39;%Y-%m-%d %H:%M:%S.%f&#39;,
 u&#39;%Y-%m-%d %H:%M&#39;,
 u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y %H:%M:%S&#39;,
 u&#39;%m/%d/%Y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%Y %H:%M&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y %H:%M:%S&#39;,
 u&#39;%m/%d/%y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%y %H:%M&#39;,
 u&#39;%m/%d/%y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y&#39;,
 u&#39;%b %d %Y&#39;,
 u&#39;%b %d, %Y&#39;,
 u&#39;%d %b %Y&#39;,
 u&#39;%d %b, %Y&#39;,
 u&#39;%B %d %Y&#39;,
 u&#39;%B %d, %Y&#39;,
 u&#39;%d %B %Y&#39;,
 u&#39;%d %B, %Y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>u&#39;.&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CONTENT_TYPE</td>
          <td class="code"><pre>u&#39;text/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>u&#39;django.views.debug.SafeExceptionReporterFilter&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>u&#39;django.core.files.storage.FileSystemStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>u&#39;webmaster@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.mail.backends.smtp.EmailBackend&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>u&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>u&#39;[Django] &#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[u&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;,
 u&#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(u&#39;af&#39;, u&#39;Afrikaans&#39;),
 (u&#39;ar&#39;, u&#39;Arabic&#39;),
 (u&#39;ast&#39;, u&#39;Asturian&#39;),
 (u&#39;az&#39;, u&#39;Azerbaijani&#39;),
 (u&#39;bg&#39;, u&#39;Bulgarian&#39;),
 (u&#39;be&#39;, u&#39;Belarusian&#39;),
 (u&#39;bn&#39;, u&#39;Bengali&#39;),
 (u&#39;br&#39;, u&#39;Breton&#39;),
 (u&#39;bs&#39;, u&#39;Bosnian&#39;),
 (u&#39;ca&#39;, u&#39;Catalan&#39;),
 (u&#39;cs&#39;, u&#39;Czech&#39;),
 (u&#39;cy&#39;, u&#39;Welsh&#39;),
 (u&#39;da&#39;, u&#39;Danish&#39;),
 (u&#39;de&#39;, u&#39;German&#39;),
 (u&#39;dsb&#39;, u&#39;Lower Sorbian&#39;),
 (u&#39;el&#39;, u&#39;Greek&#39;),
 (u&#39;en&#39;, u&#39;English&#39;),
 (u&#39;en-au&#39;, u&#39;Australian English&#39;),
 (u&#39;en-gb&#39;, u&#39;British English&#39;),
 (u&#39;eo&#39;, u&#39;Esperanto&#39;),
 (u&#39;es&#39;, u&#39;Spanish&#39;),
 (u&#39;es-ar&#39;, u&#39;Argentinian Spanish&#39;),
 (u&#39;es-co&#39;, u&#39;Colombian Spanish&#39;),
 (u&#39;es-mx&#39;, u&#39;Mexican Spanish&#39;),
 (u&#39;es-ni&#39;, u&#39;Nicaraguan Spanish&#39;),
 (u&#39;es-ve&#39;, u&#39;Venezuelan Spanish&#39;),
 (u&#39;et&#39;, u&#39;Estonian&#39;),
 (u&#39;eu&#39;, u&#39;Basque&#39;),
 (u&#39;fa&#39;, u&#39;Persian&#39;),
 (u&#39;fi&#39;, u&#39;Finnish&#39;),
 (u&#39;fr&#39;, u&#39;French&#39;),
 (u&#39;fy&#39;, u&#39;Frisian&#39;),
 (u&#39;ga&#39;, u&#39;Irish&#39;),
 (u&#39;gd&#39;, u&#39;Scottish Gaelic&#39;),
 (u&#39;gl&#39;, u&#39;Galician&#39;),
 (u&#39;he&#39;, u&#39;Hebrew&#39;),
 (u&#39;hi&#39;, u&#39;Hindi&#39;),
 (u&#39;hr&#39;, u&#39;Croatian&#39;),
 (u&#39;hsb&#39;, u&#39;Upper Sorbian&#39;),
 (u&#39;hu&#39;, u&#39;Hungarian&#39;),
 (u&#39;ia&#39;, u&#39;Interlingua&#39;),
 (u&#39;id&#39;, u&#39;Indonesian&#39;),
 (u&#39;io&#39;, u&#39;Ido&#39;),
 (u&#39;is&#39;, u&#39;Icelandic&#39;),
 (u&#39;it&#39;, u&#39;Italian&#39;),
 (u&#39;ja&#39;, u&#39;Japanese&#39;),
 (u&#39;ka&#39;, u&#39;Georgian&#39;),
 (u&#39;kk&#39;, u&#39;Kazakh&#39;),
 (u&#39;km&#39;, u&#39;Khmer&#39;),
 (u&#39;kn&#39;, u&#39;Kannada&#39;),
 (u&#39;ko&#39;, u&#39;Korean&#39;),
 (u&#39;lb&#39;, u&#39;Luxembourgish&#39;),
 (u&#39;lt&#39;, u&#39;Lithuanian&#39;),
 (u&#39;lv&#39;, u&#39;Latvian&#39;),
 (u&#39;mk&#39;, u&#39;Macedonian&#39;),
 (u&#39;ml&#39;, u&#39;Malayalam&#39;),
 (u&#39;mn&#39;, u&#39;Mongolian&#39;),
 (u&#39;mr&#39;, u&#39;Marathi&#39;),
 (u&#39;my&#39;, u&#39;Burmese&#39;),
 (u&#39;nb&#39;, u&#39;Norwegian Bokm\xe5l&#39;),
 (u&#39;ne&#39;, u&#39;Nepali&#39;),
 (u&#39;nl&#39;, u&#39;Dutch&#39;),
 (u&#39;nn&#39;, u&#39;Norwegian Nynorsk&#39;),
 (u&#39;os&#39;, u&#39;Ossetic&#39;),
 (u&#39;pa&#39;, u&#39;Punjabi&#39;),
 (u&#39;pl&#39;, u&#39;Polish&#39;),
 (u&#39;pt&#39;, u&#39;Portuguese&#39;),
 (u&#39;pt-br&#39;, u&#39;Brazilian Portuguese&#39;),
 (u&#39;ro&#39;, u&#39;Romanian&#39;),
 (u&#39;ru&#39;, u&#39;Russian&#39;),
 (u&#39;sk&#39;, u&#39;Slovak&#39;),
 (u&#39;sl&#39;, u&#39;Slovenian&#39;),
 (u&#39;sq&#39;, u&#39;Albanian&#39;),
 (u&#39;sr&#39;, u&#39;Serbian&#39;),
 (u&#39;sr-latn&#39;, u&#39;Serbian Latin&#39;),
 (u&#39;sv&#39;, u&#39;Swedish&#39;),
 (u&#39;sw&#39;, u&#39;Swahili&#39;),
 (u&#39;ta&#39;, u&#39;Tamil&#39;),
 (u&#39;te&#39;, u&#39;Telugu&#39;),
 (u&#39;th&#39;, u&#39;Thai&#39;),
 (u&#39;tr&#39;, u&#39;Turkish&#39;),
 (u&#39;tt&#39;, u&#39;Tatar&#39;),
 (u&#39;udm&#39;, u&#39;Udmurt&#39;),
 (u&#39;uk&#39;, u&#39;Ukrainian&#39;),
 (u&#39;ur&#39;, u&#39;Urdu&#39;),
 (u&#39;vi&#39;, u&#39;Vietnamese&#39;),
 (u&#39;zh-hans&#39;, u&#39;Simplified Chinese&#39;),
 (u&#39;zh-hant&#39;, u&#39;Traditional Chinese&#39;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[u&#39;he&#39;, u&#39;ar&#39;, u&#39;fa&#39;, u&#39;ur&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#39;en-us&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;django_language&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>u&#39;logging.config.dictConfig&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>u&#39;/accounts/profile/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>u&#39;/accounts/login/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE_CLASSES</td>
          <td class="code"><pre>(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>u&#39;F j&#39;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#39;PAGE_SIZE&#39;: 10}</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#39;quantum.urls&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>u&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;sessionid&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.backends.db&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.serializers.JSONSerializer&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#39;quantum.settings&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.signing.TimestampSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[u&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,
 u&#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/static&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#39;/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#39;APP_DIRS&#39;: True,
  &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
  &#39;DIRS&#39;: [],
  &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;,
                                     &#39;django.template.context_processors.request&#39;,
                                     &#39;django.contrib.auth.context_processors.auth&#39;,
                                     &#39;django.contrib.messages.context_processors.messages&#39;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>u&#39;django.test.runner.DiscoverRunner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>u&#39;,&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>u&#39;P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%H:%M:%S&#39;, u&#39;%H:%M:%S.%f&#39;, u&#39;%H:%M&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#39;UTC&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_ETAGS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#39;quantum.wsgi.application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>u&#39;SAMEORIGIN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>u&#39;F Y&#39;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>

getMessage: 
(postNoAuth)  Code Request 500
Headers: Map(Connection -> Vector(close), Content-Length -> Vector(194219), Content-Type -> Vector(text/html; charset=UTF-8), Date -> Vector(Thu, 26 Oct 2017 16:49:35 GMT), Server -> Vector(Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5), Status -> Vector(HTTP/1.1 500 Internal Server Error), Vary -> Vector(Cookie), X-Frame-Options -> Vector(SAMEORIGIN))
Body:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>IntegrityError at /project/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#666; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em;}
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
  </style>
  
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\-");
        var oRegExp = new RegExp("(^|\s)" + strClassName + "(\s|$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
      hideAll(getElementsByClassName(document, 'div', 'pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
    //-->
  </script>
  
</head>
<body>
<div id="summary">
  <h1>IntegrityError at /project/</h1>
  <pre class="exception_value">(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>https://quantum.tp.dsi.tecnico.ulisboa.pt/project/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>1.10.5</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>IntegrityError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py in defaulterrorhandler, line 36</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/usr/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>2.7.5</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#39;/var/repo/quantum-api/quantum&#39;,
 &#39;/var/repo/quantum-api&#39;,
 &#39;/usr/lib64/python27.zip&#39;,
 &#39;/usr/lib64/python2.7&#39;,
 &#39;/usr/lib64/python2.7/plat-linux2&#39;,
 &#39;/usr/lib64/python2.7/lib-tk&#39;,
 &#39;/usr/lib64/python2.7/lib-old&#39;,
 &#39;/usr/lib64/python2.7/lib-dynload&#39;,
 &#39;/usr/lib64/python2.7/site-packages&#39;,
 &#39;/usr/lib/python2.7/site-packages&#39;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Thu, 26 Oct 2017 16:49:35 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py</code> in <code>inner</code>

          
            <div class="context" id="c140416040014624">
              
                <ol start="32" class="pre-context" id="pre140416040014624">
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    This decorator is automatically applied to all middleware to ensure that</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    no middleware leaks an exception and that the next middleware in the stack</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    can rely on getting a response instead of an exception.</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    @wraps(get_response, assigned=available_attrs(get_response))</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    def inner(request):</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="39" class="context-line">
                <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>
            response = get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='40' class="post-context" id="post140416040014624">
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>            response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    return inner</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014624')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014624">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method WSGIHandler._legacy_get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_legacy_get_response</code>

          
            <div class="context" id="c140416040014552">
              
                <ol start="242" class="pre-context" id="pre140416040014552">
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        # Apply request middleware</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        for middleware_method in self._request_middleware:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            response = middleware_method(request)</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="249" class="context-line">
                <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>
            response = self._get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='250' class="post-context" id="post140416040014552">
                  
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        return response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014552')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014552">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method SecurityMiddleware.process_request of &lt;django.middleware.security.SecurityMiddleware object at 0x7fb52d1582d0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014480">
              
                <ol start="180" class="pre-context" id="pre140416040014480">
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            except Exception as e:</pre></li>
                
                </ol>
              
              <ol start="187" class="context-line">
                <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>
                response = self.process_exception_by_middleware(e, request)</pre> <span>...</span></li></ol>
              
                <ol start='188' class="post-context" id="post140416040014480">
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                view_name = callback.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            else:                                           # CBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014480')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014480">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014408">
              
                <ol start="178" class="pre-context" id="pre140416040014408">
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            response = middleware_method(request, callback, callback_args, callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="185" class="context-line">
                <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>
                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='186' class="post-context" id="post140416040014408">
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014408')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014408">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py</code> in <code>wrapped_view</code>

          
            <div class="context" id="c140416040014336">
              
                <ol start="51" class="pre-context" id="pre140416040014336">
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    Marks a view function as being exempt from the CSRF view protection.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # We could just do view_func.csrf_exempt = True, but decorators</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # are nicer if they don&#39;t have side-effects, so we return a new</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # function.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="58" class="context-line">
                <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>
        return view_func(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='59' class="post-context" id="post140416040014336">
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014336')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014336">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/project/&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c140&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/viewsets.py</code> in <code>view</code>

          
            <div class="context" id="c140416040014264">
              
                <ol start="76" class="pre-context" id="pre140416040014264">
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # Bind methods to actions</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # This is the bit that&#39;s different to a standard view</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            for method, action in actions.items():</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                handler = getattr(self, action)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                setattr(self, method, handler)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # And continue as usual</pre></li>
                
                </ol>
              
              <ol start="83" class="context-line">
                <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>
            return self.dispatch(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='84' class="post-context" id="post140416040014264">
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # and possible attributes set by decorators</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # like csrf_exempt from dispatch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014264')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014264">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>action</td>
                    <td class="code"><pre>u&#39;list&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>actions</td>
                    <td class="code"><pre>{u&#39;get&#39;: u&#39;list&#39;, u&#39;post&#39;: u&#39;create&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.views.ProjectViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.list of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{u&#39;suffix&#39;: u&#39;List&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>method</td>
                    <td class="code"><pre>u&#39;get&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014192">
              
                <ol start="476" class="pre-context" id="pre140416040014192">
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="483" class="context-line">
                <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>
            response = self.handle_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='484' class="post-context" id="post140416040014192">
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>handle_exception</code>

          
            <div class="context" id="c140416040014120">
              
                <ol start="436" class="pre-context" id="pre140416040014120">
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        exception_handler = self.get_exception_handler()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        context = self.get_exception_handler_context()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response = exception_handler(exc, context)</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="443" class="context-line">
                <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>
            self.raise_uncaught_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='444' class="post-context" id="post140416040014120">
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response.exception = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if settings.DEBUG:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014120')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014120">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{u&#39;args&#39;: (),
 u&#39;kwargs&#39;: {},
 u&#39;request&#39;: &lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;,
 u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception_handler</td>
                    <td class="code"><pre>&lt;function exception_handler at 0x7fb52d572050&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014048">
              
                <ol start="473" class="pre-context" id="pre140416040014048">
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>
            response = handler(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='481' class="post-context" id="post140416040014048">
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014048')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014048">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>create</code>

          
            <div class="context" id="c140416040013976">
              
                <ol start="14" class="pre-context" id="pre140416040013976">
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>class CreateModelMixin(object):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    Create a model instance.</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                </ol>
              
              <ol start="21" class="context-line">
                <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>
        self.perform_create(serializer)</pre> <span>...</span></li></ol>
              
                <ol start='22' class="post-context" id="post140416040013976">
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def perform_create(self, serializer):</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.save()</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013976')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013976">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>perform_create</code>

          
            <div class="context" id="c140416040013904">
              
                <ol start="19" class="pre-context" id="pre140416040013904">
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        self.perform_create(serializer)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def perform_create(self, serializer):</pre></li>
                
                </ol>
              
              <ol start="26" class="context-line">
                <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>
        serializer.save()</pre> <span>...</span></li></ol>
              
                <ol start='27' class="post-context" id="post140416040013904">
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def get_success_headers(self, data):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {&#39;Location&#39;: data[api_settings.URL_FIELD_NAME]}</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        except (TypeError, KeyError):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {}</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/serializers.py</code> in <code>save</code>

          
            <div class="context" id="c140416039976832">
              
                <ol start="207" class="pre-context" id="pre140416039976832">
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`update()` did not return an object instance.&#39;</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="214" class="context-line">
                <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>
            self.instance = self.create(validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='215' class="post-context" id="post140416039976832">
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`create()` did not return an object instance.&#39;</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976832')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976832">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/var/repo/quantum-api/quantum/api/serializers.py</code> in <code>create</code>

          
            <div class="context" id="c140416039974384">
              
                <ol start="69" class="pre-context" id="pre140416039974384">
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        regions_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        apikeys_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        project = Project.objects.filter(projectID=projectid).first()</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;regions&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            regions_data = validated_data.pop(&#39;regions&#39;)</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;apikeys&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            apikeys_data = validated_data.pop(&#39;apikeys&#39;)</pre></li>
                
                </ol>
              
              <ol start="76" class="context-line">
                <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>
        project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='77' class="post-context" id="post140416039974384">
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for apikey_data in apikeys_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Apikey.objects.update_or_create(project=project,**apikey_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for region_data in regions_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Region.objects.update_or_create(project=project,region=region_data.get(&#39;region&#39;),defaults=region_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        return project</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        </pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974384')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974384">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>apikeys_data</td>
                    <td class="code"><pre>[OrderedDict([(u&#39;api_user&#39;, u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;), (u&#39;api_key&#39;, u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;)])]</pre></td>
                  </tr>
                
                  <tr>
                    <td>project</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>projectid</td>
                    <td class="code"><pre>u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>regions_data</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039974312">
              
                <ol start="78" class="pre-context" id="pre140416039974312">
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039974312">
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974312')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974312">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;defaults&#39;: {u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;},
 &#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;update_or_create&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d610f10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>update_or_create</code>

          
            <div class="context" id="c140416039976760">
              
                <ol start="483" class="pre-context" id="pre140416039976760">
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        defaults = defaults or {}</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        lookup, params = self._extract_model_params(defaults, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            obj = self.get(**lookup)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        except self.model.DoesNotExist:</pre></li>
                
                </ol>
              
              <ol start="490" class="context-line">
                <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>
            obj, created = self._create_object_from_params(lookup, params)</pre> <span>...</span></li></ol>
              
                <ol start='491' class="post-context" id="post140416039976760">
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            if created:</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>                return obj, created</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        for k, v in six.iteritems(defaults):</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            setattr(obj, k, v)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        obj.save(using=self.db)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        return obj, False</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>defaults</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039976904">
              
                <ol start="506" class="pre-context" id="pre140416039976904">
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            return obj, True</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        except IntegrityError:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            exc_info = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                return self.get(**lookup), False</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            except self.model.DoesNotExist:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                pass</pre></li>
                
                </ol>
              
              <ol start="513" class="context-line">
                <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>
            six.reraise(*exc_info)</pre> <span>...</span></li></ol>
              
                <ol start='514' class="post-context" id="post140416039976904">
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>    def _extract_model_params(self, defaults, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        Prepares `lookup` (kwargs that are valid model attributes), `params`</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        (for creating a model instance) based on given kwargs; for use by</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        get_or_create and update_or_create.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039975536">
              
                <ol start="498" class="pre-context" id="pre140416039975536">
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>    def _create_object_from_params(self, lookup, params):</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Tries to create an object using passed params.</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Used by get_or_create and update_or_create</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            with transaction.atomic(using=self.db):</pre></li>
                
                </ol>
              
              <ol start="505" class="context-line">
                <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>
                obj = self.create(**params)</pre> <span>...</span></li></ol>
              
                <ol start='506' class="post-context" id="post140416039975536">
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            return obj, True</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        except IntegrityError:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            exc_info = sys.exc_info()</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            try:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>                return self.get(**lookup), False</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            except self.model.DoesNotExist:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975536')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975536">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>create</code>

          
            <div class="context" id="c140416039975464">
              
                <ol start="392" class="pre-context" id="pre140416039975464">
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def create(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        Creates a new object with the given kwargs, saving it to the database</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        and returning the created object.</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="399" class="context-line">
                <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>
        obj.save(force_insert=True, using=self.db)</pre> <span>...</span></li></ol>
              
                <ol start='400' class="post-context" id="post140416039975464">
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def _populate_pk_values(self, objs):</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        for obj in objs:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>            if obj.pk is None:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975464')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975464">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save</code>

          
            <div class="context" id="c140416039975392">
              
                <ol start="789" class="pre-context" id="pre140416039975392">
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                if not field.primary_key and not hasattr(field, &#39;through&#39;):</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                    field_names.add(field.attname)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            loaded_fields = field_names.difference(deferred_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        self.save_base(using=using, force_insert=force_insert,</pre></li>
                
                </ol>
              
              <ol start="796" class="context-line">
                <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>
                       force_update=force_update, update_fields=update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='797' class="post-context" id="post140416039975392">
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    save.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    def save_base(self, raw=False, force_insert=False,</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                  force_update=False, using=None, update_fields=None):</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        Handles the parts of saving which should be done only once per save,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975392')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975392">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>deferred_fields</td>
                    <td class="code"><pre>set()</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save_base</code>

          
            <div class="context" id="c140416039975320">
              
                <ol start="817" class="pre-context" id="pre140416039975320">
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        meta = cls._meta</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        if not meta.auto_created:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            signals.pre_save.send(sender=origin, instance=self, raw=raw, using=using,</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                                  update_fields=update_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        with transaction.atomic(using=using, savepoint=False):</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                self._save_parents(cls, using, update_fields)</pre></li>
                
                </ol>
              
              <ol start="824" class="context-line">
                <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>
            updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='825' class="post-context" id="post140416039975320">
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Store the database on which the object was saved</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.db = using</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Once saved, this is no longer a to-be-added instance.</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.adding = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Signal that the save is complete</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975320')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975320">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_save_table</code>

          
            <div class="context" id="c140416039975248">
              
                <ol start="901" class="pre-context" id="pre140416039975248">
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                self._order = order_value</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            fields = meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if not pk_set:</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                fields = [f for f in fields if not isinstance(f, AutoField)]</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            update_pk = bool(meta.has_auto_field and not pk_set)</pre></li>
                
                </ol>
              
              <ol start="908" class="context-line">
                <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>
            result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</pre> <span>...</span></li></ol>
              
                <ol start='909' class="post-context" id="post140416039975248">
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if update_pk:</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                setattr(self, meta.pk.attname, result)</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        return updated</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975248')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975248">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>f</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_do_insert</code>

          
            <div class="context" id="c140416039975176">
              
                <ol start="940" class="pre-context" id="pre140416039975176">
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def _do_insert(self, manager, using, fields, update_pk, raw):</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        Do an INSERT. If update_pk is defined then this method should return</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        the new pk for the model.</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        return manager._insert([self], fields=fields, return_id=update_pk,</pre></li>
                
                </ol>
              
              <ol start="947" class="context-line">
                <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>
                               using=using, raw=raw)</pre> <span>...</span></li></ol>
              
                <ol start='948' class="post-context" id="post140416039975176">
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def delete(self, using=None, keep_parents=False):</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        using = using or router.db_for_write(self.__class__, instance=self)</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        assert self._get_pk_val() is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            &quot;%s object can&#39;t be deleted because its %s attribute is set to None.&quot; %</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            (self._meta.object_name, self._meta.pk.attname)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975176')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975176">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039975104">
              
                <ol start="78" class="pre-context" id="pre140416039975104">
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039975104">
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975104')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975104">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;Project: Project object&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;fields&#39;: [&lt;django.db.models.fields.CharField: projectID&gt;,
            &lt;django.db.models.fields.DateTimeField: expires&gt;,
            &lt;django.db.models.fields.CharField: domainid&gt;,
            &lt;django.db.models.fields.CharField: centrocusto&gt;],
 &#39;raw&#39;: False,
 &#39;return_id&#39;: True,
 &#39;using&#39;: &#39;default&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;_insert&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_insert</code>

          
            <div class="context" id="c140416039975032">
              
                <ol start="1038" class="pre-context" id="pre140416039975032">
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        the InsertQuery class and is how Model.save() is implemented.</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        if using is None:</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>            using = self.db</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query = sql.InsertQuery(self.model)</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1045" class="context-line">
                <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>
        return query.get_compiler(using=using).execute_sql(return_id)</pre> <span>...</span></li></ol>
              
                <ol start='1046' class="post-context" id="post140416039975032">
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    def _batched_insert(self, objs, fields, batch_size):</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        A little helper method for bulk_insert to insert the bulk one batch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975032')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975032">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;Project: Project object&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0x7fb528303390&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py</code> in <code>execute_sql</code>

          
            <div class="context" id="c140416039974960">
              
                <ol start="1047" class="pre-context" id="pre140416039974960">
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        assert not (</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            return_id and len(self.query.objs) != 1 and</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            not self.connection.features.can_return_ids_from_bulk_insert</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        self.return_id = return_id</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            for sql, params in self.as_sql():</pre></li>
                
                </ol>
              
              <ol start="1054" class="context-line">
                <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>
                cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='1055' class="post-context" id="post140416039974960">
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if not (return_id and cursor):</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_ids_from_bulk_insert and len(self.query.objs) &gt; 1:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return self.connection.ops.fetch_returned_insert_ids(cursor)</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_id_from_insert:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                assert len(self.query.objs) == 1</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974960')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974960">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.compiler.SQLInsertCompiler object at 0x7fb528303790&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974888">
              
                <ol start="72" class="pre-context" id="pre140416039974888">
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>class CursorDebugWrapper(CursorWrapper):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    # XXX callproc isn&#39;t instrumented at this time.</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        start = time()</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="79" class="context-line">
                <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>
            return super(CursorDebugWrapper, self).execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='80' class="post-context" id="post140416039974888">
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        finally:</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            stop = time()</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            duration = stop - start</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            sql = self.db.ops.last_executed_query(self.cursor, sql, params)</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            self.db.queries_log.append({</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>                &#39;sql&#39;: sql,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974888')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974888">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>duration</td>
                    <td class="code"><pre>0.00045990943908691406</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>start</td>
                    <td class="code"><pre>1509036575.558545</pre></td>
                  </tr>
                
                  <tr>
                    <td>stop</td>
                    <td class="code"><pre>1509036575.559005</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974528">
              
                <ol start="57" class="pre-context" id="pre140416039974528">
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            if params is None:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>                return self.cursor.execute(sql)</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            else:</pre></li>
                
                </ol>
              
              <ol start="64" class="context-line">
                <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>
                return self.cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='65' class="post-context" id="post140416039974528">
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def executemany(self, sql, param_list):</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            return self.cursor.executemany(sql, param_list)</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974528')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974528">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974600">
              
                <ol start="108" class="pre-context" id="pre140416039974600">
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # args is None means no string interpolation</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.execute(query, args)</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                
                </ol>
              
              <ol start="115" class="context-line">
                <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>
                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre> <span>...</span></li></ol>
              
                <ol start='116' class="post-context" id="post140416039974600">
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            raise</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.executemany(query, args)</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974600')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974600">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974672">
              
                <ol start="103" class="pre-context" id="pre140416039974672">
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def __init__(self, cursor):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        self.cursor = cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def execute(self, query, args=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # args is None means no string interpolation</pre></li>
                
                </ol>
              
              <ol start="110" class="context-line">
                <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>
            return self.cursor.execute(query, args)</pre> <span>...</span></li></ol>
              
                <ol start='111' class="post-context" id="post140416039974672">
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        except Database.OperationalError as e:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974672')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974672">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974816">
              
                <ol start="198" class="pre-context" id="pre140416039974816">
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>                self.errorhandler(self, TypeError, m)</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except (SystemExit, KeyboardInterrupt):</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            raise</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except:</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            exc, value, tb = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            del tb</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            self.messages.append((exc, value))</pre></li>
                
                </ol>
              
              <ol start="205" class="context-line">
                <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>
            self.errorhandler(self, exc, value)</pre> <span>...</span></li></ol>
              
                <ol start='206' class="post-context" id="post140416039974816">
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        self._executed = query</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        if not self._defer_warnings: self._warning_check()</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        return r</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974816')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974816">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&lt;weakproxy at 0x7fb52d7f88e8 to Connection at 0x7fb5280dd5f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>item</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>r</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0x7fb5283037d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py</code> in <code>defaulterrorhandler</code>

          
            <div class="context" id="c140416039974744">
              
                <ol start="29" class="pre-context" id="pre140416039974744">
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    error = errorclass, errorvalue</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    if cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        cursor.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        connection.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del connection</pre></li>
                
                </ol>
              
              <ol start="36" class="context-line">
                <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>
    raise errorclass, errorvalue</pre> <span>...</span></li></ol>
              
                <ol start='37' class="post-context" id="post140416039974744">
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>re_numeric_part = re.compile(r&quot;^(\d+)&quot;)</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>def numeric_part(s):</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    &quot;&quot;&quot;Returns the leading numeric part of a string.</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974744')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974744">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>error</td>
                    <td class="code"><pre>(&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;,
 OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;))</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorclass</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorvalue</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="IntegrityError at /project/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: https://quantum.tp.dsi.tecnico.ulisboa.pt/project/

Django Version: 1.10.5
Python Version: 2.7.5
Installed Applications:
(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)
Installed Middleware:
(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)



Traceback:

File "/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py" in inner
  39.             response = get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _legacy_get_response
  249.             response = self._get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  187.                 response = self.process_exception_by_middleware(e, request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/viewsets.py" in view
  83.             return self.dispatch(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  483.             response = self.handle_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in handle_exception
  443.             self.raise_uncaught_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  480.             response = handler(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in create
  21.         self.perform_create(serializer)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in perform_create
  26.         serializer.save()

File "/usr/lib/python2.7/site-packages/rest_framework/serializers.py" in save
  214.             self.instance = self.create(validated_data)

File "/var/repo/quantum-api/quantum/api/serializers.py" in create
  76.         project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in update_or_create
  490.             obj, created = self._create_object_from_params(lookup, params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  513.             six.reraise(*exc_info)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  505.                 obj = self.create(**params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in create
  399.         obj.save(force_insert=True, using=self.db)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save
  796.                        force_update=force_update, update_fields=update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save_base
  824.             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _save_table
  908.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _do_insert
  947.                                using=using, raw=raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _insert
  1045.         return query.get_compiler(using=using).execute_sql(return_id)

File "/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py" in execute_sql
  1054.                 cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  79.             return super(CursorDebugWrapper, self).execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  64.                 return self.cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  115.                 six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  110.             return self.cursor.execute(query, args)

File "/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py" in execute
  205.             self.errorhandler(self, exc, value)

File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py" in defaulterrorhandler
  36.     raise errorclass, errorvalue

Exception Type: IntegrityError at /project/
Exception Value: (1048, &quot;Column &#39;expires&#39; cannot be null&quot;)
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>AnonymousUser</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#39;393&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#39;application/json&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_PREFIX</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>GATEWAY_INTERFACE</td>
          <td class="code"><pre>&#39;CGI/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#39;text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#39;gzip,deflate&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CHARSET</td>
          <td class="code"><pre>&#39;UTF-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#39;keep-alive&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#39;scalaj-http/1.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>u&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_TRANSLATED</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#39;172.20.15.146&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_PORT</td>
          <td class="code"><pre>&#39;50286&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#39;POST&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_SCHEME</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_URI</td>
          <td class="code"><pre>&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_FILENAME</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADDR</td>
          <td class="code"><pre>&#39;193.136.166.56&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADMIN</td>
          <td class="code"><pre>&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#39;HTTP/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SIGNATURE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#39;Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5&#39;</pre></td>
        </tr>
      
        <tr>
          <td>UNIQUE_ID</td>
          <td class="code"><pre>&#39;WfISH26EopjbHFjj@1hSKQAAAAo&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.application_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.callable_object</td>
          <td class="code"><pre>&#39;application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.enable_sendfile</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.handler_script</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.input_chunked</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_host</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_port</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.process_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.queue_start</td>
          <td class="code"><pre>&#39;1509036575543003&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.request_handler</td>
          <td class="code"><pre>&#39;wsgi-script&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.script_reloading</td>
          <td class="code"><pre>&#39;1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.version</td>
          <td class="code"><pre>(3, 4)</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;mod_wsgi.Log object at 0x7fb52812ba30&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;mod_wsgi.Input object at 0x7fb52d7f36f0&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>quantum.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#39;*&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[u&#39;django.contrib.auth.backends.ModelBackend&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>u&#39;auth.User&#39;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{u&#39;default&#39;: {u&#39;BACKEND&#39;: u&#39;django.core.cache.backends.locmem.LocMemCache&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;csrftoken&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>u&#39;django.views.csrf.csrf_failure&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>u&#39;HTTP_X_CSRFTOKEN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: False,
             &#39;AUTOCOMMIT&#39;: True,
             &#39;CONN_MAX_AGE&#39;: 0,
             &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
             &#39;HOST&#39;: &#39;localhost&#39;,
             &#39;NAME&#39;: &#39;quantumapi&#39;,
             &#39;OPTIONS&#39;: {&#39;init_command&#39;: &quot;SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;&quot;},
             &#39;PASSWORD&#39;: u&#39;********************&#39;,
             &#39;PORT&#39;: &#39;3306&#39;,
             &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                      &#39;COLLATION&#39;: None,
                      &#39;MIRROR&#39;: None,
                      &#39;NAME&#39;: None},
             &#39;TIME_ZONE&#39;: None,
             &#39;USER&#39;: &#39;root&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y, P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d %H:%M:%S&#39;,
 u&#39;%Y-%m-%d %H:%M:%S.%f&#39;,
 u&#39;%Y-%m-%d %H:%M&#39;,
 u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y %H:%M:%S&#39;,
 u&#39;%m/%d/%Y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%Y %H:%M&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y %H:%M:%S&#39;,
 u&#39;%m/%d/%y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%y %H:%M&#39;,
 u&#39;%m/%d/%y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y&#39;,
 u&#39;%b %d %Y&#39;,
 u&#39;%b %d, %Y&#39;,
 u&#39;%d %b %Y&#39;,
 u&#39;%d %b, %Y&#39;,
 u&#39;%B %d %Y&#39;,
 u&#39;%B %d, %Y&#39;,
 u&#39;%d %B %Y&#39;,
 u&#39;%d %B, %Y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>u&#39;.&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CONTENT_TYPE</td>
          <td class="code"><pre>u&#39;text/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>u&#39;django.views.debug.SafeExceptionReporterFilter&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>u&#39;django.core.files.storage.FileSystemStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>u&#39;webmaster@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.mail.backends.smtp.EmailBackend&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>u&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>u&#39;[Django] &#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[u&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;,
 u&#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(u&#39;af&#39;, u&#39;Afrikaans&#39;),
 (u&#39;ar&#39;, u&#39;Arabic&#39;),
 (u&#39;ast&#39;, u&#39;Asturian&#39;),
 (u&#39;az&#39;, u&#39;Azerbaijani&#39;),
 (u&#39;bg&#39;, u&#39;Bulgarian&#39;),
 (u&#39;be&#39;, u&#39;Belarusian&#39;),
 (u&#39;bn&#39;, u&#39;Bengali&#39;),
 (u&#39;br&#39;, u&#39;Breton&#39;),
 (u&#39;bs&#39;, u&#39;Bosnian&#39;),
 (u&#39;ca&#39;, u&#39;Catalan&#39;),
 (u&#39;cs&#39;, u&#39;Czech&#39;),
 (u&#39;cy&#39;, u&#39;Welsh&#39;),
 (u&#39;da&#39;, u&#39;Danish&#39;),
 (u&#39;de&#39;, u&#39;German&#39;),
 (u&#39;dsb&#39;, u&#39;Lower Sorbian&#39;),
 (u&#39;el&#39;, u&#39;Greek&#39;),
 (u&#39;en&#39;, u&#39;English&#39;),
 (u&#39;en-au&#39;, u&#39;Australian English&#39;),
 (u&#39;en-gb&#39;, u&#39;British English&#39;),
 (u&#39;eo&#39;, u&#39;Esperanto&#39;),
 (u&#39;es&#39;, u&#39;Spanish&#39;),
 (u&#39;es-ar&#39;, u&#39;Argentinian Spanish&#39;),
 (u&#39;es-co&#39;, u&#39;Colombian Spanish&#39;),
 (u&#39;es-mx&#39;, u&#39;Mexican Spanish&#39;),
 (u&#39;es-ni&#39;, u&#39;Nicaraguan Spanish&#39;),
 (u&#39;es-ve&#39;, u&#39;Venezuelan Spanish&#39;),
 (u&#39;et&#39;, u&#39;Estonian&#39;),
 (u&#39;eu&#39;, u&#39;Basque&#39;),
 (u&#39;fa&#39;, u&#39;Persian&#39;),
 (u&#39;fi&#39;, u&#39;Finnish&#39;),
 (u&#39;fr&#39;, u&#39;French&#39;),
 (u&#39;fy&#39;, u&#39;Frisian&#39;),
 (u&#39;ga&#39;, u&#39;Irish&#39;),
 (u&#39;gd&#39;, u&#39;Scottish Gaelic&#39;),
 (u&#39;gl&#39;, u&#39;Galician&#39;),
 (u&#39;he&#39;, u&#39;Hebrew&#39;),
 (u&#39;hi&#39;, u&#39;Hindi&#39;),
 (u&#39;hr&#39;, u&#39;Croatian&#39;),
 (u&#39;hsb&#39;, u&#39;Upper Sorbian&#39;),
 (u&#39;hu&#39;, u&#39;Hungarian&#39;),
 (u&#39;ia&#39;, u&#39;Interlingua&#39;),
 (u&#39;id&#39;, u&#39;Indonesian&#39;),
 (u&#39;io&#39;, u&#39;Ido&#39;),
 (u&#39;is&#39;, u&#39;Icelandic&#39;),
 (u&#39;it&#39;, u&#39;Italian&#39;),
 (u&#39;ja&#39;, u&#39;Japanese&#39;),
 (u&#39;ka&#39;, u&#39;Georgian&#39;),
 (u&#39;kk&#39;, u&#39;Kazakh&#39;),
 (u&#39;km&#39;, u&#39;Khmer&#39;),
 (u&#39;kn&#39;, u&#39;Kannada&#39;),
 (u&#39;ko&#39;, u&#39;Korean&#39;),
 (u&#39;lb&#39;, u&#39;Luxembourgish&#39;),
 (u&#39;lt&#39;, u&#39;Lithuanian&#39;),
 (u&#39;lv&#39;, u&#39;Latvian&#39;),
 (u&#39;mk&#39;, u&#39;Macedonian&#39;),
 (u&#39;ml&#39;, u&#39;Malayalam&#39;),
 (u&#39;mn&#39;, u&#39;Mongolian&#39;),
 (u&#39;mr&#39;, u&#39;Marathi&#39;),
 (u&#39;my&#39;, u&#39;Burmese&#39;),
 (u&#39;nb&#39;, u&#39;Norwegian Bokm\xe5l&#39;),
 (u&#39;ne&#39;, u&#39;Nepali&#39;),
 (u&#39;nl&#39;, u&#39;Dutch&#39;),
 (u&#39;nn&#39;, u&#39;Norwegian Nynorsk&#39;),
 (u&#39;os&#39;, u&#39;Ossetic&#39;),
 (u&#39;pa&#39;, u&#39;Punjabi&#39;),
 (u&#39;pl&#39;, u&#39;Polish&#39;),
 (u&#39;pt&#39;, u&#39;Portuguese&#39;),
 (u&#39;pt-br&#39;, u&#39;Brazilian Portuguese&#39;),
 (u&#39;ro&#39;, u&#39;Romanian&#39;),
 (u&#39;ru&#39;, u&#39;Russian&#39;),
 (u&#39;sk&#39;, u&#39;Slovak&#39;),
 (u&#39;sl&#39;, u&#39;Slovenian&#39;),
 (u&#39;sq&#39;, u&#39;Albanian&#39;),
 (u&#39;sr&#39;, u&#39;Serbian&#39;),
 (u&#39;sr-latn&#39;, u&#39;Serbian Latin&#39;),
 (u&#39;sv&#39;, u&#39;Swedish&#39;),
 (u&#39;sw&#39;, u&#39;Swahili&#39;),
 (u&#39;ta&#39;, u&#39;Tamil&#39;),
 (u&#39;te&#39;, u&#39;Telugu&#39;),
 (u&#39;th&#39;, u&#39;Thai&#39;),
 (u&#39;tr&#39;, u&#39;Turkish&#39;),
 (u&#39;tt&#39;, u&#39;Tatar&#39;),
 (u&#39;udm&#39;, u&#39;Udmurt&#39;),
 (u&#39;uk&#39;, u&#39;Ukrainian&#39;),
 (u&#39;ur&#39;, u&#39;Urdu&#39;),
 (u&#39;vi&#39;, u&#39;Vietnamese&#39;),
 (u&#39;zh-hans&#39;, u&#39;Simplified Chinese&#39;),
 (u&#39;zh-hant&#39;, u&#39;Traditional Chinese&#39;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[u&#39;he&#39;, u&#39;ar&#39;, u&#39;fa&#39;, u&#39;ur&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#39;en-us&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;django_language&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>u&#39;logging.config.dictConfig&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>u&#39;/accounts/profile/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>u&#39;/accounts/login/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE_CLASSES</td>
          <td class="code"><pre>(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>u&#39;F j&#39;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#39;PAGE_SIZE&#39;: 10}</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#39;quantum.urls&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>u&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;sessionid&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.backends.db&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.serializers.JSONSerializer&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#39;quantum.settings&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.signing.TimestampSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[u&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,
 u&#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/static&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#39;/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#39;APP_DIRS&#39;: True,
  &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
  &#39;DIRS&#39;: [],
  &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;,
                                     &#39;django.template.context_processors.request&#39;,
                                     &#39;django.contrib.auth.context_processors.auth&#39;,
                                     &#39;django.contrib.messages.context_processors.messages&#39;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>u&#39;django.test.runner.DiscoverRunner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>u&#39;,&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>u&#39;P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%H:%M:%S&#39;, u&#39;%H:%M:%S.%f&#39;, u&#39;%H:%M&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#39;UTC&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_ETAGS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#39;quantum.wsgi.application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>u&#39;SAMEORIGIN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>u&#39;F Y&#39;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>

getLocalizedMessage: 
(postNoAuth)  Code Request 500
Headers: Map(Connection -> Vector(close), Content-Length -> Vector(194219), Content-Type -> Vector(text/html; charset=UTF-8), Date -> Vector(Thu, 26 Oct 2017 16:49:35 GMT), Server -> Vector(Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5), Status -> Vector(HTTP/1.1 500 Internal Server Error), Vary -> Vector(Cookie), X-Frame-Options -> Vector(SAMEORIGIN))
Body:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>IntegrityError at /project/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#666; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em;}
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
  </style>
  
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\-");
        var oRegExp = new RegExp("(^|\s)" + strClassName + "(\s|$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
      hideAll(getElementsByClassName(document, 'div', 'pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
    //-->
  </script>
  
</head>
<body>
<div id="summary">
  <h1>IntegrityError at /project/</h1>
  <pre class="exception_value">(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>https://quantum.tp.dsi.tecnico.ulisboa.pt/project/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>1.10.5</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>IntegrityError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py in defaulterrorhandler, line 36</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/usr/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>2.7.5</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#39;/var/repo/quantum-api/quantum&#39;,
 &#39;/var/repo/quantum-api&#39;,
 &#39;/usr/lib64/python27.zip&#39;,
 &#39;/usr/lib64/python2.7&#39;,
 &#39;/usr/lib64/python2.7/plat-linux2&#39;,
 &#39;/usr/lib64/python2.7/lib-tk&#39;,
 &#39;/usr/lib64/python2.7/lib-old&#39;,
 &#39;/usr/lib64/python2.7/lib-dynload&#39;,
 &#39;/usr/lib64/python2.7/site-packages&#39;,
 &#39;/usr/lib/python2.7/site-packages&#39;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Thu, 26 Oct 2017 16:49:35 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py</code> in <code>inner</code>

          
            <div class="context" id="c140416040014624">
              
                <ol start="32" class="pre-context" id="pre140416040014624">
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    This decorator is automatically applied to all middleware to ensure that</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    no middleware leaks an exception and that the next middleware in the stack</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    can rely on getting a response instead of an exception.</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    @wraps(get_response, assigned=available_attrs(get_response))</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    def inner(request):</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="39" class="context-line">
                <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>
            response = get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='40' class="post-context" id="post140416040014624">
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>            response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    return inner</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014624')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014624">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method WSGIHandler._legacy_get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_legacy_get_response</code>

          
            <div class="context" id="c140416040014552">
              
                <ol start="242" class="pre-context" id="pre140416040014552">
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        # Apply request middleware</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        for middleware_method in self._request_middleware:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            response = middleware_method(request)</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="249" class="context-line">
                <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>
            response = self._get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='250' class="post-context" id="post140416040014552">
                  
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        return response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014552')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014552">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method SecurityMiddleware.process_request of &lt;django.middleware.security.SecurityMiddleware object at 0x7fb52d1582d0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014480">
              
                <ol start="180" class="pre-context" id="pre140416040014480">
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            except Exception as e:</pre></li>
                
                </ol>
              
              <ol start="187" class="context-line">
                <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>
                response = self.process_exception_by_middleware(e, request)</pre> <span>...</span></li></ol>
              
                <ol start='188' class="post-context" id="post140416040014480">
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                view_name = callback.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            else:                                           # CBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014480')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014480">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014408">
              
                <ol start="178" class="pre-context" id="pre140416040014408">
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            response = middleware_method(request, callback, callback_args, callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="185" class="context-line">
                <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>
                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='186' class="post-context" id="post140416040014408">
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014408')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014408">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py</code> in <code>wrapped_view</code>

          
            <div class="context" id="c140416040014336">
              
                <ol start="51" class="pre-context" id="pre140416040014336">
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    Marks a view function as being exempt from the CSRF view protection.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # We could just do view_func.csrf_exempt = True, but decorators</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # are nicer if they don&#39;t have side-effects, so we return a new</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # function.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="58" class="context-line">
                <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>
        return view_func(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='59' class="post-context" id="post140416040014336">
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014336')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014336">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/project/&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c140&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/viewsets.py</code> in <code>view</code>

          
            <div class="context" id="c140416040014264">
              
                <ol start="76" class="pre-context" id="pre140416040014264">
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # Bind methods to actions</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # This is the bit that&#39;s different to a standard view</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            for method, action in actions.items():</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                handler = getattr(self, action)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                setattr(self, method, handler)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # And continue as usual</pre></li>
                
                </ol>
              
              <ol start="83" class="context-line">
                <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>
            return self.dispatch(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='84' class="post-context" id="post140416040014264">
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # and possible attributes set by decorators</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # like csrf_exempt from dispatch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014264')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014264">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>action</td>
                    <td class="code"><pre>u&#39;list&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>actions</td>
                    <td class="code"><pre>{u&#39;get&#39;: u&#39;list&#39;, u&#39;post&#39;: u&#39;create&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.views.ProjectViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.list of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{u&#39;suffix&#39;: u&#39;List&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>method</td>
                    <td class="code"><pre>u&#39;get&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014192">
              
                <ol start="476" class="pre-context" id="pre140416040014192">
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="483" class="context-line">
                <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>
            response = self.handle_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='484' class="post-context" id="post140416040014192">
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>handle_exception</code>

          
            <div class="context" id="c140416040014120">
              
                <ol start="436" class="pre-context" id="pre140416040014120">
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        exception_handler = self.get_exception_handler()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        context = self.get_exception_handler_context()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response = exception_handler(exc, context)</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="443" class="context-line">
                <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>
            self.raise_uncaught_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='444' class="post-context" id="post140416040014120">
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response.exception = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if settings.DEBUG:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014120')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014120">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{u&#39;args&#39;: (),
 u&#39;kwargs&#39;: {},
 u&#39;request&#39;: &lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;,
 u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception_handler</td>
                    <td class="code"><pre>&lt;function exception_handler at 0x7fb52d572050&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014048">
              
                <ol start="473" class="pre-context" id="pre140416040014048">
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>
            response = handler(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='481' class="post-context" id="post140416040014048">
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014048')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014048">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>create</code>

          
            <div class="context" id="c140416040013976">
              
                <ol start="14" class="pre-context" id="pre140416040013976">
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>class CreateModelMixin(object):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    Create a model instance.</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                </ol>
              
              <ol start="21" class="context-line">
                <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>
        self.perform_create(serializer)</pre> <span>...</span></li></ol>
              
                <ol start='22' class="post-context" id="post140416040013976">
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def perform_create(self, serializer):</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.save()</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013976')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013976">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>perform_create</code>

          
            <div class="context" id="c140416040013904">
              
                <ol start="19" class="pre-context" id="pre140416040013904">
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        self.perform_create(serializer)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def perform_create(self, serializer):</pre></li>
                
                </ol>
              
              <ol start="26" class="context-line">
                <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>
        serializer.save()</pre> <span>...</span></li></ol>
              
                <ol start='27' class="post-context" id="post140416040013904">
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def get_success_headers(self, data):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {&#39;Location&#39;: data[api_settings.URL_FIELD_NAME]}</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        except (TypeError, KeyError):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {}</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/serializers.py</code> in <code>save</code>

          
            <div class="context" id="c140416039976832">
              
                <ol start="207" class="pre-context" id="pre140416039976832">
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`update()` did not return an object instance.&#39;</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="214" class="context-line">
                <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>
            self.instance = self.create(validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='215' class="post-context" id="post140416039976832">
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`create()` did not return an object instance.&#39;</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976832')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976832">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/var/repo/quantum-api/quantum/api/serializers.py</code> in <code>create</code>

          
            <div class="context" id="c140416039974384">
              
                <ol start="69" class="pre-context" id="pre140416039974384">
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        regions_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        apikeys_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        project = Project.objects.filter(projectID=projectid).first()</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;regions&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            regions_data = validated_data.pop(&#39;regions&#39;)</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;apikeys&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            apikeys_data = validated_data.pop(&#39;apikeys&#39;)</pre></li>
                
                </ol>
              
              <ol start="76" class="context-line">
                <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>
        project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='77' class="post-context" id="post140416039974384">
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for apikey_data in apikeys_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Apikey.objects.update_or_create(project=project,**apikey_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for region_data in regions_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Region.objects.update_or_create(project=project,region=region_data.get(&#39;region&#39;),defaults=region_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        return project</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        </pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974384')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974384">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>apikeys_data</td>
                    <td class="code"><pre>[OrderedDict([(u&#39;api_user&#39;, u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;), (u&#39;api_key&#39;, u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;)])]</pre></td>
                  </tr>
                
                  <tr>
                    <td>project</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>projectid</td>
                    <td class="code"><pre>u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>regions_data</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039974312">
              
                <ol start="78" class="pre-context" id="pre140416039974312">
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039974312">
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974312')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974312">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;defaults&#39;: {u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;},
 &#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;update_or_create&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d610f10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>update_or_create</code>

          
            <div class="context" id="c140416039976760">
              
                <ol start="483" class="pre-context" id="pre140416039976760">
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        defaults = defaults or {}</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        lookup, params = self._extract_model_params(defaults, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            obj = self.get(**lookup)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        except self.model.DoesNotExist:</pre></li>
                
                </ol>
              
              <ol start="490" class="context-line">
                <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>
            obj, created = self._create_object_from_params(lookup, params)</pre> <span>...</span></li></ol>
              
                <ol start='491' class="post-context" id="post140416039976760">
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            if created:</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>                return obj, created</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        for k, v in six.iteritems(defaults):</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            setattr(obj, k, v)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        obj.save(using=self.db)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        return obj, False</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>defaults</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039976904">
              
                <ol start="506" class="pre-context" id="pre140416039976904">
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            return obj, True</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        except IntegrityError:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            exc_info = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                return self.get(**lookup), False</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            except self.model.DoesNotExist:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                pass</pre></li>
                
                </ol>
              
              <ol start="513" class="context-line">
                <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>
            six.reraise(*exc_info)</pre> <span>...</span></li></ol>
              
                <ol start='514' class="post-context" id="post140416039976904">
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>    def _extract_model_params(self, defaults, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        Prepares `lookup` (kwargs that are valid model attributes), `params`</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        (for creating a model instance) based on given kwargs; for use by</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        get_or_create and update_or_create.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039975536">
              
                <ol start="498" class="pre-context" id="pre140416039975536">
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>    def _create_object_from_params(self, lookup, params):</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Tries to create an object using passed params.</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Used by get_or_create and update_or_create</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            with transaction.atomic(using=self.db):</pre></li>
                
                </ol>
              
              <ol start="505" class="context-line">
                <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>
                obj = self.create(**params)</pre> <span>...</span></li></ol>
              
                <ol start='506' class="post-context" id="post140416039975536">
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            return obj, True</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        except IntegrityError:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            exc_info = sys.exc_info()</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            try:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>                return self.get(**lookup), False</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            except self.model.DoesNotExist:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975536')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975536">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>create</code>

          
            <div class="context" id="c140416039975464">
              
                <ol start="392" class="pre-context" id="pre140416039975464">
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def create(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        Creates a new object with the given kwargs, saving it to the database</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        and returning the created object.</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="399" class="context-line">
                <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>
        obj.save(force_insert=True, using=self.db)</pre> <span>...</span></li></ol>
              
                <ol start='400' class="post-context" id="post140416039975464">
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def _populate_pk_values(self, objs):</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        for obj in objs:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>            if obj.pk is None:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975464')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975464">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save</code>

          
            <div class="context" id="c140416039975392">
              
                <ol start="789" class="pre-context" id="pre140416039975392">
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                if not field.primary_key and not hasattr(field, &#39;through&#39;):</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                    field_names.add(field.attname)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            loaded_fields = field_names.difference(deferred_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        self.save_base(using=using, force_insert=force_insert,</pre></li>
                
                </ol>
              
              <ol start="796" class="context-line">
                <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>
                       force_update=force_update, update_fields=update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='797' class="post-context" id="post140416039975392">
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    save.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    def save_base(self, raw=False, force_insert=False,</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                  force_update=False, using=None, update_fields=None):</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        Handles the parts of saving which should be done only once per save,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975392')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975392">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>deferred_fields</td>
                    <td class="code"><pre>set()</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save_base</code>

          
            <div class="context" id="c140416039975320">
              
                <ol start="817" class="pre-context" id="pre140416039975320">
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        meta = cls._meta</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        if not meta.auto_created:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            signals.pre_save.send(sender=origin, instance=self, raw=raw, using=using,</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                                  update_fields=update_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        with transaction.atomic(using=using, savepoint=False):</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                self._save_parents(cls, using, update_fields)</pre></li>
                
                </ol>
              
              <ol start="824" class="context-line">
                <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>
            updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='825' class="post-context" id="post140416039975320">
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Store the database on which the object was saved</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.db = using</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Once saved, this is no longer a to-be-added instance.</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.adding = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Signal that the save is complete</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975320')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975320">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_save_table</code>

          
            <div class="context" id="c140416039975248">
              
                <ol start="901" class="pre-context" id="pre140416039975248">
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                self._order = order_value</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            fields = meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if not pk_set:</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                fields = [f for f in fields if not isinstance(f, AutoField)]</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            update_pk = bool(meta.has_auto_field and not pk_set)</pre></li>
                
                </ol>
              
              <ol start="908" class="context-line">
                <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>
            result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</pre> <span>...</span></li></ol>
              
                <ol start='909' class="post-context" id="post140416039975248">
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if update_pk:</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                setattr(self, meta.pk.attname, result)</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        return updated</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975248')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975248">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>f</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_do_insert</code>

          
            <div class="context" id="c140416039975176">
              
                <ol start="940" class="pre-context" id="pre140416039975176">
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def _do_insert(self, manager, using, fields, update_pk, raw):</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        Do an INSERT. If update_pk is defined then this method should return</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        the new pk for the model.</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        return manager._insert([self], fields=fields, return_id=update_pk,</pre></li>
                
                </ol>
              
              <ol start="947" class="context-line">
                <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>
                               using=using, raw=raw)</pre> <span>...</span></li></ol>
              
                <ol start='948' class="post-context" id="post140416039975176">
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def delete(self, using=None, keep_parents=False):</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        using = using or router.db_for_write(self.__class__, instance=self)</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        assert self._get_pk_val() is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            &quot;%s object can&#39;t be deleted because its %s attribute is set to None.&quot; %</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            (self._meta.object_name, self._meta.pk.attname)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975176')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975176">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039975104">
              
                <ol start="78" class="pre-context" id="pre140416039975104">
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039975104">
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975104')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975104">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;Project: Project object&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;fields&#39;: [&lt;django.db.models.fields.CharField: projectID&gt;,
            &lt;django.db.models.fields.DateTimeField: expires&gt;,
            &lt;django.db.models.fields.CharField: domainid&gt;,
            &lt;django.db.models.fields.CharField: centrocusto&gt;],
 &#39;raw&#39;: False,
 &#39;return_id&#39;: True,
 &#39;using&#39;: &#39;default&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;_insert&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_insert</code>

          
            <div class="context" id="c140416039975032">
              
                <ol start="1038" class="pre-context" id="pre140416039975032">
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        the InsertQuery class and is how Model.save() is implemented.</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        if using is None:</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>            using = self.db</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query = sql.InsertQuery(self.model)</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1045" class="context-line">
                <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>
        return query.get_compiler(using=using).execute_sql(return_id)</pre> <span>...</span></li></ol>
              
                <ol start='1046' class="post-context" id="post140416039975032">
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    def _batched_insert(self, objs, fields, batch_size):</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        A little helper method for bulk_insert to insert the bulk one batch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975032')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975032">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;Project: Project object&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0x7fb528303390&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py</code> in <code>execute_sql</code>

          
            <div class="context" id="c140416039974960">
              
                <ol start="1047" class="pre-context" id="pre140416039974960">
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        assert not (</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            return_id and len(self.query.objs) != 1 and</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            not self.connection.features.can_return_ids_from_bulk_insert</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        self.return_id = return_id</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            for sql, params in self.as_sql():</pre></li>
                
                </ol>
              
              <ol start="1054" class="context-line">
                <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>
                cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='1055' class="post-context" id="post140416039974960">
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if not (return_id and cursor):</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_ids_from_bulk_insert and len(self.query.objs) &gt; 1:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return self.connection.ops.fetch_returned_insert_ids(cursor)</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_id_from_insert:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                assert len(self.query.objs) == 1</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974960')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974960">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.compiler.SQLInsertCompiler object at 0x7fb528303790&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974888">
              
                <ol start="72" class="pre-context" id="pre140416039974888">
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>class CursorDebugWrapper(CursorWrapper):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    # XXX callproc isn&#39;t instrumented at this time.</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        start = time()</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="79" class="context-line">
                <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>
            return super(CursorDebugWrapper, self).execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='80' class="post-context" id="post140416039974888">
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        finally:</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            stop = time()</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            duration = stop - start</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            sql = self.db.ops.last_executed_query(self.cursor, sql, params)</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            self.db.queries_log.append({</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>                &#39;sql&#39;: sql,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974888')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974888">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>duration</td>
                    <td class="code"><pre>0.00045990943908691406</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>start</td>
                    <td class="code"><pre>1509036575.558545</pre></td>
                  </tr>
                
                  <tr>
                    <td>stop</td>
                    <td class="code"><pre>1509036575.559005</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974528">
              
                <ol start="57" class="pre-context" id="pre140416039974528">
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            if params is None:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>                return self.cursor.execute(sql)</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            else:</pre></li>
                
                </ol>
              
              <ol start="64" class="context-line">
                <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>
                return self.cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='65' class="post-context" id="post140416039974528">
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def executemany(self, sql, param_list):</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            return self.cursor.executemany(sql, param_list)</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974528')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974528">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974600">
              
                <ol start="108" class="pre-context" id="pre140416039974600">
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # args is None means no string interpolation</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.execute(query, args)</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                
                </ol>
              
              <ol start="115" class="context-line">
                <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>
                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre> <span>...</span></li></ol>
              
                <ol start='116' class="post-context" id="post140416039974600">
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            raise</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.executemany(query, args)</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974600')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974600">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974672">
              
                <ol start="103" class="pre-context" id="pre140416039974672">
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def __init__(self, cursor):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        self.cursor = cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def execute(self, query, args=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # args is None means no string interpolation</pre></li>
                
                </ol>
              
              <ol start="110" class="context-line">
                <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>
            return self.cursor.execute(query, args)</pre> <span>...</span></li></ol>
              
                <ol start='111' class="post-context" id="post140416039974672">
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        except Database.OperationalError as e:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974672')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974672">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974816">
              
                <ol start="198" class="pre-context" id="pre140416039974816">
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>                self.errorhandler(self, TypeError, m)</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except (SystemExit, KeyboardInterrupt):</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            raise</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except:</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            exc, value, tb = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            del tb</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            self.messages.append((exc, value))</pre></li>
                
                </ol>
              
              <ol start="205" class="context-line">
                <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>
            self.errorhandler(self, exc, value)</pre> <span>...</span></li></ol>
              
                <ol start='206' class="post-context" id="post140416039974816">
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        self._executed = query</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        if not self._defer_warnings: self._warning_check()</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        return r</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974816')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974816">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&lt;weakproxy at 0x7fb52d7f88e8 to Connection at 0x7fb5280dd5f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>item</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>r</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0x7fb5283037d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py</code> in <code>defaulterrorhandler</code>

          
            <div class="context" id="c140416039974744">
              
                <ol start="29" class="pre-context" id="pre140416039974744">
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    error = errorclass, errorvalue</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    if cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        cursor.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        connection.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del connection</pre></li>
                
                </ol>
              
              <ol start="36" class="context-line">
                <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>
    raise errorclass, errorvalue</pre> <span>...</span></li></ol>
              
                <ol start='37' class="post-context" id="post140416039974744">
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>re_numeric_part = re.compile(r&quot;^(\d+)&quot;)</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>def numeric_part(s):</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    &quot;&quot;&quot;Returns the leading numeric part of a string.</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974744')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974744">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>error</td>
                    <td class="code"><pre>(&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;,
 OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;))</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorclass</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorvalue</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="IntegrityError at /project/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: https://quantum.tp.dsi.tecnico.ulisboa.pt/project/

Django Version: 1.10.5
Python Version: 2.7.5
Installed Applications:
(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)
Installed Middleware:
(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)



Traceback:

File "/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py" in inner
  39.             response = get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _legacy_get_response
  249.             response = self._get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  187.                 response = self.process_exception_by_middleware(e, request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/viewsets.py" in view
  83.             return self.dispatch(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  483.             response = self.handle_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in handle_exception
  443.             self.raise_uncaught_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  480.             response = handler(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in create
  21.         self.perform_create(serializer)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in perform_create
  26.         serializer.save()

File "/usr/lib/python2.7/site-packages/rest_framework/serializers.py" in save
  214.             self.instance = self.create(validated_data)

File "/var/repo/quantum-api/quantum/api/serializers.py" in create
  76.         project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in update_or_create
  490.             obj, created = self._create_object_from_params(lookup, params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  513.             six.reraise(*exc_info)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  505.                 obj = self.create(**params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in create
  399.         obj.save(force_insert=True, using=self.db)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save
  796.                        force_update=force_update, update_fields=update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save_base
  824.             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _save_table
  908.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _do_insert
  947.                                using=using, raw=raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _insert
  1045.         return query.get_compiler(using=using).execute_sql(return_id)

File "/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py" in execute_sql
  1054.                 cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  79.             return super(CursorDebugWrapper, self).execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  64.                 return self.cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  115.                 six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  110.             return self.cursor.execute(query, args)

File "/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py" in execute
  205.             self.errorhandler(self, exc, value)

File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py" in defaulterrorhandler
  36.     raise errorclass, errorvalue

Exception Type: IntegrityError at /project/
Exception Value: (1048, &quot;Column &#39;expires&#39; cannot be null&quot;)
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>AnonymousUser</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#39;393&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#39;application/json&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_PREFIX</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>GATEWAY_INTERFACE</td>
          <td class="code"><pre>&#39;CGI/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#39;text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#39;gzip,deflate&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CHARSET</td>
          <td class="code"><pre>&#39;UTF-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#39;keep-alive&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#39;scalaj-http/1.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>u&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_TRANSLATED</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#39;172.20.15.146&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_PORT</td>
          <td class="code"><pre>&#39;50286&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#39;POST&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_SCHEME</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_URI</td>
          <td class="code"><pre>&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_FILENAME</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADDR</td>
          <td class="code"><pre>&#39;193.136.166.56&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADMIN</td>
          <td class="code"><pre>&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#39;HTTP/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SIGNATURE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#39;Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5&#39;</pre></td>
        </tr>
      
        <tr>
          <td>UNIQUE_ID</td>
          <td class="code"><pre>&#39;WfISH26EopjbHFjj@1hSKQAAAAo&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.application_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.callable_object</td>
          <td class="code"><pre>&#39;application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.enable_sendfile</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.handler_script</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.input_chunked</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_host</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_port</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.process_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.queue_start</td>
          <td class="code"><pre>&#39;1509036575543003&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.request_handler</td>
          <td class="code"><pre>&#39;wsgi-script&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.script_reloading</td>
          <td class="code"><pre>&#39;1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.version</td>
          <td class="code"><pre>(3, 4)</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;mod_wsgi.Log object at 0x7fb52812ba30&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;mod_wsgi.Input object at 0x7fb52d7f36f0&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>quantum.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#39;*&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[u&#39;django.contrib.auth.backends.ModelBackend&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>u&#39;auth.User&#39;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{u&#39;default&#39;: {u&#39;BACKEND&#39;: u&#39;django.core.cache.backends.locmem.LocMemCache&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;csrftoken&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>u&#39;django.views.csrf.csrf_failure&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>u&#39;HTTP_X_CSRFTOKEN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: False,
             &#39;AUTOCOMMIT&#39;: True,
             &#39;CONN_MAX_AGE&#39;: 0,
             &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
             &#39;HOST&#39;: &#39;localhost&#39;,
             &#39;NAME&#39;: &#39;quantumapi&#39;,
             &#39;OPTIONS&#39;: {&#39;init_command&#39;: &quot;SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;&quot;},
             &#39;PASSWORD&#39;: u&#39;********************&#39;,
             &#39;PORT&#39;: &#39;3306&#39;,
             &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                      &#39;COLLATION&#39;: None,
                      &#39;MIRROR&#39;: None,
                      &#39;NAME&#39;: None},
             &#39;TIME_ZONE&#39;: None,
             &#39;USER&#39;: &#39;root&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y, P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d %H:%M:%S&#39;,
 u&#39;%Y-%m-%d %H:%M:%S.%f&#39;,
 u&#39;%Y-%m-%d %H:%M&#39;,
 u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y %H:%M:%S&#39;,
 u&#39;%m/%d/%Y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%Y %H:%M&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y %H:%M:%S&#39;,
 u&#39;%m/%d/%y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%y %H:%M&#39;,
 u&#39;%m/%d/%y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y&#39;,
 u&#39;%b %d %Y&#39;,
 u&#39;%b %d, %Y&#39;,
 u&#39;%d %b %Y&#39;,
 u&#39;%d %b, %Y&#39;,
 u&#39;%B %d %Y&#39;,
 u&#39;%B %d, %Y&#39;,
 u&#39;%d %B %Y&#39;,
 u&#39;%d %B, %Y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>u&#39;.&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CONTENT_TYPE</td>
          <td class="code"><pre>u&#39;text/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>u&#39;django.views.debug.SafeExceptionReporterFilter&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>u&#39;django.core.files.storage.FileSystemStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>u&#39;webmaster@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.mail.backends.smtp.EmailBackend&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>u&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>u&#39;[Django] &#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[u&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;,
 u&#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(u&#39;af&#39;, u&#39;Afrikaans&#39;),
 (u&#39;ar&#39;, u&#39;Arabic&#39;),
 (u&#39;ast&#39;, u&#39;Asturian&#39;),
 (u&#39;az&#39;, u&#39;Azerbaijani&#39;),
 (u&#39;bg&#39;, u&#39;Bulgarian&#39;),
 (u&#39;be&#39;, u&#39;Belarusian&#39;),
 (u&#39;bn&#39;, u&#39;Bengali&#39;),
 (u&#39;br&#39;, u&#39;Breton&#39;),
 (u&#39;bs&#39;, u&#39;Bosnian&#39;),
 (u&#39;ca&#39;, u&#39;Catalan&#39;),
 (u&#39;cs&#39;, u&#39;Czech&#39;),
 (u&#39;cy&#39;, u&#39;Welsh&#39;),
 (u&#39;da&#39;, u&#39;Danish&#39;),
 (u&#39;de&#39;, u&#39;German&#39;),
 (u&#39;dsb&#39;, u&#39;Lower Sorbian&#39;),
 (u&#39;el&#39;, u&#39;Greek&#39;),
 (u&#39;en&#39;, u&#39;English&#39;),
 (u&#39;en-au&#39;, u&#39;Australian English&#39;),
 (u&#39;en-gb&#39;, u&#39;British English&#39;),
 (u&#39;eo&#39;, u&#39;Esperanto&#39;),
 (u&#39;es&#39;, u&#39;Spanish&#39;),
 (u&#39;es-ar&#39;, u&#39;Argentinian Spanish&#39;),
 (u&#39;es-co&#39;, u&#39;Colombian Spanish&#39;),
 (u&#39;es-mx&#39;, u&#39;Mexican Spanish&#39;),
 (u&#39;es-ni&#39;, u&#39;Nicaraguan Spanish&#39;),
 (u&#39;es-ve&#39;, u&#39;Venezuelan Spanish&#39;),
 (u&#39;et&#39;, u&#39;Estonian&#39;),
 (u&#39;eu&#39;, u&#39;Basque&#39;),
 (u&#39;fa&#39;, u&#39;Persian&#39;),
 (u&#39;fi&#39;, u&#39;Finnish&#39;),
 (u&#39;fr&#39;, u&#39;French&#39;),
 (u&#39;fy&#39;, u&#39;Frisian&#39;),
 (u&#39;ga&#39;, u&#39;Irish&#39;),
 (u&#39;gd&#39;, u&#39;Scottish Gaelic&#39;),
 (u&#39;gl&#39;, u&#39;Galician&#39;),
 (u&#39;he&#39;, u&#39;Hebrew&#39;),
 (u&#39;hi&#39;, u&#39;Hindi&#39;),
 (u&#39;hr&#39;, u&#39;Croatian&#39;),
 (u&#39;hsb&#39;, u&#39;Upper Sorbian&#39;),
 (u&#39;hu&#39;, u&#39;Hungarian&#39;),
 (u&#39;ia&#39;, u&#39;Interlingua&#39;),
 (u&#39;id&#39;, u&#39;Indonesian&#39;),
 (u&#39;io&#39;, u&#39;Ido&#39;),
 (u&#39;is&#39;, u&#39;Icelandic&#39;),
 (u&#39;it&#39;, u&#39;Italian&#39;),
 (u&#39;ja&#39;, u&#39;Japanese&#39;),
 (u&#39;ka&#39;, u&#39;Georgian&#39;),
 (u&#39;kk&#39;, u&#39;Kazakh&#39;),
 (u&#39;km&#39;, u&#39;Khmer&#39;),
 (u&#39;kn&#39;, u&#39;Kannada&#39;),
 (u&#39;ko&#39;, u&#39;Korean&#39;),
 (u&#39;lb&#39;, u&#39;Luxembourgish&#39;),
 (u&#39;lt&#39;, u&#39;Lithuanian&#39;),
 (u&#39;lv&#39;, u&#39;Latvian&#39;),
 (u&#39;mk&#39;, u&#39;Macedonian&#39;),
 (u&#39;ml&#39;, u&#39;Malayalam&#39;),
 (u&#39;mn&#39;, u&#39;Mongolian&#39;),
 (u&#39;mr&#39;, u&#39;Marathi&#39;),
 (u&#39;my&#39;, u&#39;Burmese&#39;),
 (u&#39;nb&#39;, u&#39;Norwegian Bokm\xe5l&#39;),
 (u&#39;ne&#39;, u&#39;Nepali&#39;),
 (u&#39;nl&#39;, u&#39;Dutch&#39;),
 (u&#39;nn&#39;, u&#39;Norwegian Nynorsk&#39;),
 (u&#39;os&#39;, u&#39;Ossetic&#39;),
 (u&#39;pa&#39;, u&#39;Punjabi&#39;),
 (u&#39;pl&#39;, u&#39;Polish&#39;),
 (u&#39;pt&#39;, u&#39;Portuguese&#39;),
 (u&#39;pt-br&#39;, u&#39;Brazilian Portuguese&#39;),
 (u&#39;ro&#39;, u&#39;Romanian&#39;),
 (u&#39;ru&#39;, u&#39;Russian&#39;),
 (u&#39;sk&#39;, u&#39;Slovak&#39;),
 (u&#39;sl&#39;, u&#39;Slovenian&#39;),
 (u&#39;sq&#39;, u&#39;Albanian&#39;),
 (u&#39;sr&#39;, u&#39;Serbian&#39;),
 (u&#39;sr-latn&#39;, u&#39;Serbian Latin&#39;),
 (u&#39;sv&#39;, u&#39;Swedish&#39;),
 (u&#39;sw&#39;, u&#39;Swahili&#39;),
 (u&#39;ta&#39;, u&#39;Tamil&#39;),
 (u&#39;te&#39;, u&#39;Telugu&#39;),
 (u&#39;th&#39;, u&#39;Thai&#39;),
 (u&#39;tr&#39;, u&#39;Turkish&#39;),
 (u&#39;tt&#39;, u&#39;Tatar&#39;),
 (u&#39;udm&#39;, u&#39;Udmurt&#39;),
 (u&#39;uk&#39;, u&#39;Ukrainian&#39;),
 (u&#39;ur&#39;, u&#39;Urdu&#39;),
 (u&#39;vi&#39;, u&#39;Vietnamese&#39;),
 (u&#39;zh-hans&#39;, u&#39;Simplified Chinese&#39;),
 (u&#39;zh-hant&#39;, u&#39;Traditional Chinese&#39;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[u&#39;he&#39;, u&#39;ar&#39;, u&#39;fa&#39;, u&#39;ur&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#39;en-us&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;django_language&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>u&#39;logging.config.dictConfig&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>u&#39;/accounts/profile/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>u&#39;/accounts/login/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE_CLASSES</td>
          <td class="code"><pre>(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>u&#39;F j&#39;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#39;PAGE_SIZE&#39;: 10}</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#39;quantum.urls&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>u&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;sessionid&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.backends.db&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.serializers.JSONSerializer&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#39;quantum.settings&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.signing.TimestampSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[u&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,
 u&#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/static&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#39;/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#39;APP_DIRS&#39;: True,
  &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
  &#39;DIRS&#39;: [],
  &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;,
                                     &#39;django.template.context_processors.request&#39;,
                                     &#39;django.contrib.auth.context_processors.auth&#39;,
                                     &#39;django.contrib.messages.context_processors.messages&#39;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>u&#39;django.test.runner.DiscoverRunner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>u&#39;,&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>u&#39;P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%H:%M:%S&#39;, u&#39;%H:%M:%S.%f&#39;, u&#39;%H:%M&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#39;UTC&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_ETAGS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#39;quantum.wsgi.application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>u&#39;SAMEORIGIN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>u&#39;F Y&#39;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>
 
StackTrace: 
()
[EXCEPTION toString] openstacklib.ApiException: (postNoAuth)  Code Request 500
Headers: Map(Connection -> Vector(close), Content-Length -> Vector(194219), Content-Type -> Vector(text/html; charset=UTF-8), Date -> Vector(Thu, 26 Oct 2017 16:49:35 GMT), Server -> Vector(Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5), Status -> Vector(HTTP/1.1 500 Internal Server Error), Vary -> Vector(Cookie), X-Frame-Options -> Vector(SAMEORIGIN))
Body:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>IntegrityError at /project/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#666; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em;}
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
  </style>
  
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\-");
        var oRegExp = new RegExp("(^|\s)" + strClassName + "(\s|$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
      hideAll(getElementsByClassName(document, 'div', 'pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
    //-->
  </script>
  
</head>
<body>
<div id="summary">
  <h1>IntegrityError at /project/</h1>
  <pre class="exception_value">(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>https://quantum.tp.dsi.tecnico.ulisboa.pt/project/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>1.10.5</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>IntegrityError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py in defaulterrorhandler, line 36</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/usr/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>2.7.5</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#39;/var/repo/quantum-api/quantum&#39;,
 &#39;/var/repo/quantum-api&#39;,
 &#39;/usr/lib64/python27.zip&#39;,
 &#39;/usr/lib64/python2.7&#39;,
 &#39;/usr/lib64/python2.7/plat-linux2&#39;,
 &#39;/usr/lib64/python2.7/lib-tk&#39;,
 &#39;/usr/lib64/python2.7/lib-old&#39;,
 &#39;/usr/lib64/python2.7/lib-dynload&#39;,
 &#39;/usr/lib64/python2.7/site-packages&#39;,
 &#39;/usr/lib/python2.7/site-packages&#39;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Thu, 26 Oct 2017 16:49:35 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py</code> in <code>inner</code>

          
            <div class="context" id="c140416040014624">
              
                <ol start="32" class="pre-context" id="pre140416040014624">
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    This decorator is automatically applied to all middleware to ensure that</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    no middleware leaks an exception and that the next middleware in the stack</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    can rely on getting a response instead of an exception.</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    @wraps(get_response, assigned=available_attrs(get_response))</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    def inner(request):</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="39" class="context-line">
                <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>
            response = get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='40' class="post-context" id="post140416040014624">
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>            response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    return inner</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014624')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014624">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method WSGIHandler._legacy_get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_legacy_get_response</code>

          
            <div class="context" id="c140416040014552">
              
                <ol start="242" class="pre-context" id="pre140416040014552">
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        # Apply request middleware</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        for middleware_method in self._request_middleware:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            response = middleware_method(request)</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="249" class="context-line">
                <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>
            response = self._get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='250' class="post-context" id="post140416040014552">
                  
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        return response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014552')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014552">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method SecurityMiddleware.process_request of &lt;django.middleware.security.SecurityMiddleware object at 0x7fb52d1582d0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014480">
              
                <ol start="180" class="pre-context" id="pre140416040014480">
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            except Exception as e:</pre></li>
                
                </ol>
              
              <ol start="187" class="context-line">
                <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>
                response = self.process_exception_by_middleware(e, request)</pre> <span>...</span></li></ol>
              
                <ol start='188' class="post-context" id="post140416040014480">
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                view_name = callback.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            else:                                           # CBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014480')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014480">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014408">
              
                <ol start="178" class="pre-context" id="pre140416040014408">
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            response = middleware_method(request, callback, callback_args, callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="185" class="context-line">
                <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>
                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='186' class="post-context" id="post140416040014408">
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014408')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014408">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py</code> in <code>wrapped_view</code>

          
            <div class="context" id="c140416040014336">
              
                <ol start="51" class="pre-context" id="pre140416040014336">
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    Marks a view function as being exempt from the CSRF view protection.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # We could just do view_func.csrf_exempt = True, but decorators</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # are nicer if they don&#39;t have side-effects, so we return a new</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # function.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="58" class="context-line">
                <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>
        return view_func(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='59' class="post-context" id="post140416040014336">
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014336')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014336">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/project/&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c140&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/viewsets.py</code> in <code>view</code>

          
            <div class="context" id="c140416040014264">
              
                <ol start="76" class="pre-context" id="pre140416040014264">
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # Bind methods to actions</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # This is the bit that&#39;s different to a standard view</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            for method, action in actions.items():</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                handler = getattr(self, action)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                setattr(self, method, handler)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # And continue as usual</pre></li>
                
                </ol>
              
              <ol start="83" class="context-line">
                <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>
            return self.dispatch(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='84' class="post-context" id="post140416040014264">
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # and possible attributes set by decorators</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # like csrf_exempt from dispatch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014264')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014264">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>action</td>
                    <td class="code"><pre>u&#39;list&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>actions</td>
                    <td class="code"><pre>{u&#39;get&#39;: u&#39;list&#39;, u&#39;post&#39;: u&#39;create&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.views.ProjectViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.list of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{u&#39;suffix&#39;: u&#39;List&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>method</td>
                    <td class="code"><pre>u&#39;get&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014192">
              
                <ol start="476" class="pre-context" id="pre140416040014192">
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="483" class="context-line">
                <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>
            response = self.handle_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='484' class="post-context" id="post140416040014192">
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>handle_exception</code>

          
            <div class="context" id="c140416040014120">
              
                <ol start="436" class="pre-context" id="pre140416040014120">
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        exception_handler = self.get_exception_handler()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        context = self.get_exception_handler_context()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response = exception_handler(exc, context)</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="443" class="context-line">
                <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>
            self.raise_uncaught_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='444' class="post-context" id="post140416040014120">
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response.exception = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if settings.DEBUG:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014120')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014120">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{u&#39;args&#39;: (),
 u&#39;kwargs&#39;: {},
 u&#39;request&#39;: &lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;,
 u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception_handler</td>
                    <td class="code"><pre>&lt;function exception_handler at 0x7fb52d572050&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014048">
              
                <ol start="473" class="pre-context" id="pre140416040014048">
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>
            response = handler(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='481' class="post-context" id="post140416040014048">
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014048')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014048">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>create</code>

          
            <div class="context" id="c140416040013976">
              
                <ol start="14" class="pre-context" id="pre140416040013976">
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>class CreateModelMixin(object):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    Create a model instance.</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                </ol>
              
              <ol start="21" class="context-line">
                <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>
        self.perform_create(serializer)</pre> <span>...</span></li></ol>
              
                <ol start='22' class="post-context" id="post140416040013976">
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def perform_create(self, serializer):</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.save()</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013976')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013976">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>perform_create</code>

          
            <div class="context" id="c140416040013904">
              
                <ol start="19" class="pre-context" id="pre140416040013904">
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        self.perform_create(serializer)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def perform_create(self, serializer):</pre></li>
                
                </ol>
              
              <ol start="26" class="context-line">
                <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>
        serializer.save()</pre> <span>...</span></li></ol>
              
                <ol start='27' class="post-context" id="post140416040013904">
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def get_success_headers(self, data):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {&#39;Location&#39;: data[api_settings.URL_FIELD_NAME]}</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        except (TypeError, KeyError):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {}</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/serializers.py</code> in <code>save</code>

          
            <div class="context" id="c140416039976832">
              
                <ol start="207" class="pre-context" id="pre140416039976832">
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`update()` did not return an object instance.&#39;</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="214" class="context-line">
                <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>
            self.instance = self.create(validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='215' class="post-context" id="post140416039976832">
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`create()` did not return an object instance.&#39;</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976832')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976832">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/var/repo/quantum-api/quantum/api/serializers.py</code> in <code>create</code>

          
            <div class="context" id="c140416039974384">
              
                <ol start="69" class="pre-context" id="pre140416039974384">
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        regions_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        apikeys_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        project = Project.objects.filter(projectID=projectid).first()</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;regions&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            regions_data = validated_data.pop(&#39;regions&#39;)</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;apikeys&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            apikeys_data = validated_data.pop(&#39;apikeys&#39;)</pre></li>
                
                </ol>
              
              <ol start="76" class="context-line">
                <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>
        project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='77' class="post-context" id="post140416039974384">
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for apikey_data in apikeys_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Apikey.objects.update_or_create(project=project,**apikey_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for region_data in regions_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Region.objects.update_or_create(project=project,region=region_data.get(&#39;region&#39;),defaults=region_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        return project</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        </pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974384')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974384">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>apikeys_data</td>
                    <td class="code"><pre>[OrderedDict([(u&#39;api_user&#39;, u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;), (u&#39;api_key&#39;, u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;)])]</pre></td>
                  </tr>
                
                  <tr>
                    <td>project</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>projectid</td>
                    <td class="code"><pre>u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>regions_data</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039974312">
              
                <ol start="78" class="pre-context" id="pre140416039974312">
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039974312">
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974312')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974312">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;defaults&#39;: {u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;},
 &#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;update_or_create&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d610f10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>update_or_create</code>

          
            <div class="context" id="c140416039976760">
              
                <ol start="483" class="pre-context" id="pre140416039976760">
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        defaults = defaults or {}</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        lookup, params = self._extract_model_params(defaults, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            obj = self.get(**lookup)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        except self.model.DoesNotExist:</pre></li>
                
                </ol>
              
              <ol start="490" class="context-line">
                <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>
            obj, created = self._create_object_from_params(lookup, params)</pre> <span>...</span></li></ol>
              
                <ol start='491' class="post-context" id="post140416039976760">
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            if created:</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>                return obj, created</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        for k, v in six.iteritems(defaults):</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            setattr(obj, k, v)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        obj.save(using=self.db)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        return obj, False</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>defaults</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039976904">
              
                <ol start="506" class="pre-context" id="pre140416039976904">
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            return obj, True</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        except IntegrityError:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            exc_info = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                return self.get(**lookup), False</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            except self.model.DoesNotExist:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                pass</pre></li>
                
                </ol>
              
              <ol start="513" class="context-line">
                <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>
            six.reraise(*exc_info)</pre> <span>...</span></li></ol>
              
                <ol start='514' class="post-context" id="post140416039976904">
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>    def _extract_model_params(self, defaults, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        Prepares `lookup` (kwargs that are valid model attributes), `params`</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        (for creating a model instance) based on given kwargs; for use by</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        get_or_create and update_or_create.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039975536">
              
                <ol start="498" class="pre-context" id="pre140416039975536">
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>    def _create_object_from_params(self, lookup, params):</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Tries to create an object using passed params.</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Used by get_or_create and update_or_create</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            with transaction.atomic(using=self.db):</pre></li>
                
                </ol>
              
              <ol start="505" class="context-line">
                <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>
                obj = self.create(**params)</pre> <span>...</span></li></ol>
              
                <ol start='506' class="post-context" id="post140416039975536">
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            return obj, True</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        except IntegrityError:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            exc_info = sys.exc_info()</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            try:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>                return self.get(**lookup), False</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            except self.model.DoesNotExist:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975536')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975536">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>create</code>

          
            <div class="context" id="c140416039975464">
              
                <ol start="392" class="pre-context" id="pre140416039975464">
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def create(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        Creates a new object with the given kwargs, saving it to the database</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        and returning the created object.</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="399" class="context-line">
                <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>
        obj.save(force_insert=True, using=self.db)</pre> <span>...</span></li></ol>
              
                <ol start='400' class="post-context" id="post140416039975464">
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def _populate_pk_values(self, objs):</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        for obj in objs:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>            if obj.pk is None:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975464')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975464">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save</code>

          
            <div class="context" id="c140416039975392">
              
                <ol start="789" class="pre-context" id="pre140416039975392">
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                if not field.primary_key and not hasattr(field, &#39;through&#39;):</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                    field_names.add(field.attname)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            loaded_fields = field_names.difference(deferred_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        self.save_base(using=using, force_insert=force_insert,</pre></li>
                
                </ol>
              
              <ol start="796" class="context-line">
                <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>
                       force_update=force_update, update_fields=update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='797' class="post-context" id="post140416039975392">
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    save.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    def save_base(self, raw=False, force_insert=False,</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                  force_update=False, using=None, update_fields=None):</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        Handles the parts of saving which should be done only once per save,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975392')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975392">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>deferred_fields</td>
                    <td class="code"><pre>set()</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save_base</code>

          
            <div class="context" id="c140416039975320">
              
                <ol start="817" class="pre-context" id="pre140416039975320">
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        meta = cls._meta</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        if not meta.auto_created:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            signals.pre_save.send(sender=origin, instance=self, raw=raw, using=using,</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                                  update_fields=update_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        with transaction.atomic(using=using, savepoint=False):</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                self._save_parents(cls, using, update_fields)</pre></li>
                
                </ol>
              
              <ol start="824" class="context-line">
                <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>
            updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='825' class="post-context" id="post140416039975320">
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Store the database on which the object was saved</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.db = using</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Once saved, this is no longer a to-be-added instance.</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.adding = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Signal that the save is complete</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975320')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975320">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_save_table</code>

          
            <div class="context" id="c140416039975248">
              
                <ol start="901" class="pre-context" id="pre140416039975248">
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                self._order = order_value</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            fields = meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if not pk_set:</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                fields = [f for f in fields if not isinstance(f, AutoField)]</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            update_pk = bool(meta.has_auto_field and not pk_set)</pre></li>
                
                </ol>
              
              <ol start="908" class="context-line">
                <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>
            result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</pre> <span>...</span></li></ol>
              
                <ol start='909' class="post-context" id="post140416039975248">
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if update_pk:</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                setattr(self, meta.pk.attname, result)</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        return updated</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975248')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975248">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>f</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_do_insert</code>

          
            <div class="context" id="c140416039975176">
              
                <ol start="940" class="pre-context" id="pre140416039975176">
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def _do_insert(self, manager, using, fields, update_pk, raw):</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        Do an INSERT. If update_pk is defined then this method should return</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        the new pk for the model.</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        return manager._insert([self], fields=fields, return_id=update_pk,</pre></li>
                
                </ol>
              
              <ol start="947" class="context-line">
                <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>
                               using=using, raw=raw)</pre> <span>...</span></li></ol>
              
                <ol start='948' class="post-context" id="post140416039975176">
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def delete(self, using=None, keep_parents=False):</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        using = using or router.db_for_write(self.__class__, instance=self)</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        assert self._get_pk_val() is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            &quot;%s object can&#39;t be deleted because its %s attribute is set to None.&quot; %</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            (self._meta.object_name, self._meta.pk.attname)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975176')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975176">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039975104">
              
                <ol start="78" class="pre-context" id="pre140416039975104">
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039975104">
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975104')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975104">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;Project: Project object&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;fields&#39;: [&lt;django.db.models.fields.CharField: projectID&gt;,
            &lt;django.db.models.fields.DateTimeField: expires&gt;,
            &lt;django.db.models.fields.CharField: domainid&gt;,
            &lt;django.db.models.fields.CharField: centrocusto&gt;],
 &#39;raw&#39;: False,
 &#39;return_id&#39;: True,
 &#39;using&#39;: &#39;default&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;_insert&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_insert</code>

          
            <div class="context" id="c140416039975032">
              
                <ol start="1038" class="pre-context" id="pre140416039975032">
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        the InsertQuery class and is how Model.save() is implemented.</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        if using is None:</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>            using = self.db</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query = sql.InsertQuery(self.model)</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1045" class="context-line">
                <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>
        return query.get_compiler(using=using).execute_sql(return_id)</pre> <span>...</span></li></ol>
              
                <ol start='1046' class="post-context" id="post140416039975032">
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    def _batched_insert(self, objs, fields, batch_size):</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        A little helper method for bulk_insert to insert the bulk one batch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975032')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975032">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;Project: Project object&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0x7fb528303390&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py</code> in <code>execute_sql</code>

          
            <div class="context" id="c140416039974960">
              
                <ol start="1047" class="pre-context" id="pre140416039974960">
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        assert not (</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            return_id and len(self.query.objs) != 1 and</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            not self.connection.features.can_return_ids_from_bulk_insert</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        self.return_id = return_id</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            for sql, params in self.as_sql():</pre></li>
                
                </ol>
              
              <ol start="1054" class="context-line">
                <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>
                cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='1055' class="post-context" id="post140416039974960">
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if not (return_id and cursor):</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_ids_from_bulk_insert and len(self.query.objs) &gt; 1:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return self.connection.ops.fetch_returned_insert_ids(cursor)</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_id_from_insert:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                assert len(self.query.objs) == 1</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974960')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974960">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.compiler.SQLInsertCompiler object at 0x7fb528303790&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974888">
              
                <ol start="72" class="pre-context" id="pre140416039974888">
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>class CursorDebugWrapper(CursorWrapper):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    # XXX callproc isn&#39;t instrumented at this time.</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        start = time()</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="79" class="context-line">
                <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>
            return super(CursorDebugWrapper, self).execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='80' class="post-context" id="post140416039974888">
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        finally:</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            stop = time()</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            duration = stop - start</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            sql = self.db.ops.last_executed_query(self.cursor, sql, params)</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            self.db.queries_log.append({</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>                &#39;sql&#39;: sql,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974888')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974888">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>duration</td>
                    <td class="code"><pre>0.00045990943908691406</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>start</td>
                    <td class="code"><pre>1509036575.558545</pre></td>
                  </tr>
                
                  <tr>
                    <td>stop</td>
                    <td class="code"><pre>1509036575.559005</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974528">
              
                <ol start="57" class="pre-context" id="pre140416039974528">
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            if params is None:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>                return self.cursor.execute(sql)</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            else:</pre></li>
                
                </ol>
              
              <ol start="64" class="context-line">
                <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>
                return self.cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='65' class="post-context" id="post140416039974528">
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def executemany(self, sql, param_list):</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            return self.cursor.executemany(sql, param_list)</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974528')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974528">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974600">
              
                <ol start="108" class="pre-context" id="pre140416039974600">
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # args is None means no string interpolation</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.execute(query, args)</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                
                </ol>
              
              <ol start="115" class="context-line">
                <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>
                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre> <span>...</span></li></ol>
              
                <ol start='116' class="post-context" id="post140416039974600">
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            raise</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.executemany(query, args)</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974600')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974600">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974672">
              
                <ol start="103" class="pre-context" id="pre140416039974672">
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def __init__(self, cursor):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        self.cursor = cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def execute(self, query, args=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # args is None means no string interpolation</pre></li>
                
                </ol>
              
              <ol start="110" class="context-line">
                <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>
            return self.cursor.execute(query, args)</pre> <span>...</span></li></ol>
              
                <ol start='111' class="post-context" id="post140416039974672">
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        except Database.OperationalError as e:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974672')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974672">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974816">
              
                <ol start="198" class="pre-context" id="pre140416039974816">
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>                self.errorhandler(self, TypeError, m)</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except (SystemExit, KeyboardInterrupt):</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            raise</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except:</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            exc, value, tb = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            del tb</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            self.messages.append((exc, value))</pre></li>
                
                </ol>
              
              <ol start="205" class="context-line">
                <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>
            self.errorhandler(self, exc, value)</pre> <span>...</span></li></ol>
              
                <ol start='206' class="post-context" id="post140416039974816">
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        self._executed = query</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        if not self._defer_warnings: self._warning_check()</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        return r</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974816')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974816">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&lt;weakproxy at 0x7fb52d7f88e8 to Connection at 0x7fb5280dd5f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>item</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>r</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0x7fb5283037d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py</code> in <code>defaulterrorhandler</code>

          
            <div class="context" id="c140416039974744">
              
                <ol start="29" class="pre-context" id="pre140416039974744">
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    error = errorclass, errorvalue</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    if cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        cursor.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        connection.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del connection</pre></li>
                
                </ol>
              
              <ol start="36" class="context-line">
                <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>
    raise errorclass, errorvalue</pre> <span>...</span></li></ol>
              
                <ol start='37' class="post-context" id="post140416039974744">
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>re_numeric_part = re.compile(r&quot;^(\d+)&quot;)</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>def numeric_part(s):</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    &quot;&quot;&quot;Returns the leading numeric part of a string.</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974744')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974744">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>error</td>
                    <td class="code"><pre>(&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;,
 OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;))</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorclass</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorvalue</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="IntegrityError at /project/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: https://quantum.tp.dsi.tecnico.ulisboa.pt/project/

Django Version: 1.10.5
Python Version: 2.7.5
Installed Applications:
(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)
Installed Middleware:
(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)



Traceback:

File "/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py" in inner
  39.             response = get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _legacy_get_response
  249.             response = self._get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  187.                 response = self.process_exception_by_middleware(e, request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/viewsets.py" in view
  83.             return self.dispatch(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  483.             response = self.handle_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in handle_exception
  443.             self.raise_uncaught_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  480.             response = handler(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in create
  21.         self.perform_create(serializer)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in perform_create
  26.         serializer.save()

File "/usr/lib/python2.7/site-packages/rest_framework/serializers.py" in save
  214.             self.instance = self.create(validated_data)

File "/var/repo/quantum-api/quantum/api/serializers.py" in create
  76.         project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in update_or_create
  490.             obj, created = self._create_object_from_params(lookup, params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  513.             six.reraise(*exc_info)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  505.                 obj = self.create(**params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in create
  399.         obj.save(force_insert=True, using=self.db)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save
  796.                        force_update=force_update, update_fields=update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save_base
  824.             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _save_table
  908.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _do_insert
  947.                                using=using, raw=raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _insert
  1045.         return query.get_compiler(using=using).execute_sql(return_id)

File "/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py" in execute_sql
  1054.                 cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  79.             return super(CursorDebugWrapper, self).execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  64.                 return self.cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  115.                 six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  110.             return self.cursor.execute(query, args)

File "/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py" in execute
  205.             self.errorhandler(self, exc, value)

File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py" in defaulterrorhandler
  36.     raise errorclass, errorvalue

Exception Type: IntegrityError at /project/
Exception Value: (1048, &quot;Column &#39;expires&#39; cannot be null&quot;)
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>AnonymousUser</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#39;393&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#39;application/json&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_PREFIX</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>GATEWAY_INTERFACE</td>
          <td class="code"><pre>&#39;CGI/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#39;text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#39;gzip,deflate&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CHARSET</td>
          <td class="code"><pre>&#39;UTF-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#39;keep-alive&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#39;scalaj-http/1.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>u&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_TRANSLATED</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#39;172.20.15.146&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_PORT</td>
          <td class="code"><pre>&#39;50286&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#39;POST&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_SCHEME</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_URI</td>
          <td class="code"><pre>&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_FILENAME</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADDR</td>
          <td class="code"><pre>&#39;193.136.166.56&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADMIN</td>
          <td class="code"><pre>&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#39;HTTP/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SIGNATURE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#39;Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5&#39;</pre></td>
        </tr>
      
        <tr>
          <td>UNIQUE_ID</td>
          <td class="code"><pre>&#39;WfISH26EopjbHFjj@1hSKQAAAAo&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.application_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.callable_object</td>
          <td class="code"><pre>&#39;application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.enable_sendfile</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.handler_script</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.input_chunked</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_host</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_port</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.process_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.queue_start</td>
          <td class="code"><pre>&#39;1509036575543003&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.request_handler</td>
          <td class="code"><pre>&#39;wsgi-script&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.script_reloading</td>
          <td class="code"><pre>&#39;1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.version</td>
          <td class="code"><pre>(3, 4)</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;mod_wsgi.Log object at 0x7fb52812ba30&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;mod_wsgi.Input object at 0x7fb52d7f36f0&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>quantum.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#39;*&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[u&#39;django.contrib.auth.backends.ModelBackend&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>u&#39;auth.User&#39;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{u&#39;default&#39;: {u&#39;BACKEND&#39;: u&#39;django.core.cache.backends.locmem.LocMemCache&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;csrftoken&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>u&#39;django.views.csrf.csrf_failure&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>u&#39;HTTP_X_CSRFTOKEN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: False,
             &#39;AUTOCOMMIT&#39;: True,
             &#39;CONN_MAX_AGE&#39;: 0,
             &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
             &#39;HOST&#39;: &#39;localhost&#39;,
             &#39;NAME&#39;: &#39;quantumapi&#39;,
             &#39;OPTIONS&#39;: {&#39;init_command&#39;: &quot;SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;&quot;},
             &#39;PASSWORD&#39;: u&#39;********************&#39;,
             &#39;PORT&#39;: &#39;3306&#39;,
             &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                      &#39;COLLATION&#39;: None,
                      &#39;MIRROR&#39;: None,
                      &#39;NAME&#39;: None},
             &#39;TIME_ZONE&#39;: None,
             &#39;USER&#39;: &#39;root&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y, P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d %H:%M:%S&#39;,
 u&#39;%Y-%m-%d %H:%M:%S.%f&#39;,
 u&#39;%Y-%m-%d %H:%M&#39;,
 u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y %H:%M:%S&#39;,
 u&#39;%m/%d/%Y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%Y %H:%M&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y %H:%M:%S&#39;,
 u&#39;%m/%d/%y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%y %H:%M&#39;,
 u&#39;%m/%d/%y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y&#39;,
 u&#39;%b %d %Y&#39;,
 u&#39;%b %d, %Y&#39;,
 u&#39;%d %b %Y&#39;,
 u&#39;%d %b, %Y&#39;,
 u&#39;%B %d %Y&#39;,
 u&#39;%B %d, %Y&#39;,
 u&#39;%d %B %Y&#39;,
 u&#39;%d %B, %Y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>u&#39;.&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CONTENT_TYPE</td>
          <td class="code"><pre>u&#39;text/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>u&#39;django.views.debug.SafeExceptionReporterFilter&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>u&#39;django.core.files.storage.FileSystemStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>u&#39;webmaster@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.mail.backends.smtp.EmailBackend&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>u&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>u&#39;[Django] &#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[u&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;,
 u&#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(u&#39;af&#39;, u&#39;Afrikaans&#39;),
 (u&#39;ar&#39;, u&#39;Arabic&#39;),
 (u&#39;ast&#39;, u&#39;Asturian&#39;),
 (u&#39;az&#39;, u&#39;Azerbaijani&#39;),
 (u&#39;bg&#39;, u&#39;Bulgarian&#39;),
 (u&#39;be&#39;, u&#39;Belarusian&#39;),
 (u&#39;bn&#39;, u&#39;Bengali&#39;),
 (u&#39;br&#39;, u&#39;Breton&#39;),
 (u&#39;bs&#39;, u&#39;Bosnian&#39;),
 (u&#39;ca&#39;, u&#39;Catalan&#39;),
 (u&#39;cs&#39;, u&#39;Czech&#39;),
 (u&#39;cy&#39;, u&#39;Welsh&#39;),
 (u&#39;da&#39;, u&#39;Danish&#39;),
 (u&#39;de&#39;, u&#39;German&#39;),
 (u&#39;dsb&#39;, u&#39;Lower Sorbian&#39;),
 (u&#39;el&#39;, u&#39;Greek&#39;),
 (u&#39;en&#39;, u&#39;English&#39;),
 (u&#39;en-au&#39;, u&#39;Australian English&#39;),
 (u&#39;en-gb&#39;, u&#39;British English&#39;),
 (u&#39;eo&#39;, u&#39;Esperanto&#39;),
 (u&#39;es&#39;, u&#39;Spanish&#39;),
 (u&#39;es-ar&#39;, u&#39;Argentinian Spanish&#39;),
 (u&#39;es-co&#39;, u&#39;Colombian Spanish&#39;),
 (u&#39;es-mx&#39;, u&#39;Mexican Spanish&#39;),
 (u&#39;es-ni&#39;, u&#39;Nicaraguan Spanish&#39;),
 (u&#39;es-ve&#39;, u&#39;Venezuelan Spanish&#39;),
 (u&#39;et&#39;, u&#39;Estonian&#39;),
 (u&#39;eu&#39;, u&#39;Basque&#39;),
 (u&#39;fa&#39;, u&#39;Persian&#39;),
 (u&#39;fi&#39;, u&#39;Finnish&#39;),
 (u&#39;fr&#39;, u&#39;French&#39;),
 (u&#39;fy&#39;, u&#39;Frisian&#39;),
 (u&#39;ga&#39;, u&#39;Irish&#39;),
 (u&#39;gd&#39;, u&#39;Scottish Gaelic&#39;),
 (u&#39;gl&#39;, u&#39;Galician&#39;),
 (u&#39;he&#39;, u&#39;Hebrew&#39;),
 (u&#39;hi&#39;, u&#39;Hindi&#39;),
 (u&#39;hr&#39;, u&#39;Croatian&#39;),
 (u&#39;hsb&#39;, u&#39;Upper Sorbian&#39;),
 (u&#39;hu&#39;, u&#39;Hungarian&#39;),
 (u&#39;ia&#39;, u&#39;Interlingua&#39;),
 (u&#39;id&#39;, u&#39;Indonesian&#39;),
 (u&#39;io&#39;, u&#39;Ido&#39;),
 (u&#39;is&#39;, u&#39;Icelandic&#39;),
 (u&#39;it&#39;, u&#39;Italian&#39;),
 (u&#39;ja&#39;, u&#39;Japanese&#39;),
 (u&#39;ka&#39;, u&#39;Georgian&#39;),
 (u&#39;kk&#39;, u&#39;Kazakh&#39;),
 (u&#39;km&#39;, u&#39;Khmer&#39;),
 (u&#39;kn&#39;, u&#39;Kannada&#39;),
 (u&#39;ko&#39;, u&#39;Korean&#39;),
 (u&#39;lb&#39;, u&#39;Luxembourgish&#39;),
 (u&#39;lt&#39;, u&#39;Lithuanian&#39;),
 (u&#39;lv&#39;, u&#39;Latvian&#39;),
 (u&#39;mk&#39;, u&#39;Macedonian&#39;),
 (u&#39;ml&#39;, u&#39;Malayalam&#39;),
 (u&#39;mn&#39;, u&#39;Mongolian&#39;),
 (u&#39;mr&#39;, u&#39;Marathi&#39;),
 (u&#39;my&#39;, u&#39;Burmese&#39;),
 (u&#39;nb&#39;, u&#39;Norwegian Bokm\xe5l&#39;),
 (u&#39;ne&#39;, u&#39;Nepali&#39;),
 (u&#39;nl&#39;, u&#39;Dutch&#39;),
 (u&#39;nn&#39;, u&#39;Norwegian Nynorsk&#39;),
 (u&#39;os&#39;, u&#39;Ossetic&#39;),
 (u&#39;pa&#39;, u&#39;Punjabi&#39;),
 (u&#39;pl&#39;, u&#39;Polish&#39;),
 (u&#39;pt&#39;, u&#39;Portuguese&#39;),
 (u&#39;pt-br&#39;, u&#39;Brazilian Portuguese&#39;),
 (u&#39;ro&#39;, u&#39;Romanian&#39;),
 (u&#39;ru&#39;, u&#39;Russian&#39;),
 (u&#39;sk&#39;, u&#39;Slovak&#39;),
 (u&#39;sl&#39;, u&#39;Slovenian&#39;),
 (u&#39;sq&#39;, u&#39;Albanian&#39;),
 (u&#39;sr&#39;, u&#39;Serbian&#39;),
 (u&#39;sr-latn&#39;, u&#39;Serbian Latin&#39;),
 (u&#39;sv&#39;, u&#39;Swedish&#39;),
 (u&#39;sw&#39;, u&#39;Swahili&#39;),
 (u&#39;ta&#39;, u&#39;Tamil&#39;),
 (u&#39;te&#39;, u&#39;Telugu&#39;),
 (u&#39;th&#39;, u&#39;Thai&#39;),
 (u&#39;tr&#39;, u&#39;Turkish&#39;),
 (u&#39;tt&#39;, u&#39;Tatar&#39;),
 (u&#39;udm&#39;, u&#39;Udmurt&#39;),
 (u&#39;uk&#39;, u&#39;Ukrainian&#39;),
 (u&#39;ur&#39;, u&#39;Urdu&#39;),
 (u&#39;vi&#39;, u&#39;Vietnamese&#39;),
 (u&#39;zh-hans&#39;, u&#39;Simplified Chinese&#39;),
 (u&#39;zh-hant&#39;, u&#39;Traditional Chinese&#39;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[u&#39;he&#39;, u&#39;ar&#39;, u&#39;fa&#39;, u&#39;ur&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#39;en-us&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;django_language&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>u&#39;logging.config.dictConfig&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>u&#39;/accounts/profile/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>u&#39;/accounts/login/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE_CLASSES</td>
          <td class="code"><pre>(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>u&#39;F j&#39;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#39;PAGE_SIZE&#39;: 10}</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#39;quantum.urls&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>u&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;sessionid&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.backends.db&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.serializers.JSONSerializer&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#39;quantum.settings&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.signing.TimestampSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[u&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,
 u&#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/static&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#39;/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#39;APP_DIRS&#39;: True,
  &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
  &#39;DIRS&#39;: [],
  &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;,
                                     &#39;django.template.context_processors.request&#39;,
                                     &#39;django.contrib.auth.context_processors.auth&#39;,
                                     &#39;django.contrib.messages.context_processors.messages&#39;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>u&#39;django.test.runner.DiscoverRunner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>u&#39;,&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>u&#39;P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%H:%M:%S&#39;, u&#39;%H:%M:%S.%f&#39;, u&#39;%H:%M&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#39;UTC&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_ETAGS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#39;quantum.wsgi.application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>u&#39;SAMEORIGIN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>u&#39;F Y&#39;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>

openstacklib.ApiException: (postNoAuth)  Code Request 500
Headers: Map(Connection -> Vector(close), Content-Length -> Vector(194219), Content-Type -> Vector(text/html; charset=UTF-8), Date -> Vector(Thu, 26 Oct 2017 16:49:35 GMT), Server -> Vector(Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5), Status -> Vector(HTTP/1.1 500 Internal Server Error), Vary -> Vector(Cookie), X-Frame-Options -> Vector(SAMEORIGIN))
Body:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>IntegrityError at /project/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#666; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em;}
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
  </style>
  
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\-");
        var oRegExp = new RegExp("(^|\s)" + strClassName + "(\s|$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
      hideAll(getElementsByClassName(document, 'div', 'pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
    //-->
  </script>
  
</head>
<body>
<div id="summary">
  <h1>IntegrityError at /project/</h1>
  <pre class="exception_value">(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>https://quantum.tp.dsi.tecnico.ulisboa.pt/project/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>1.10.5</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>IntegrityError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py in defaulterrorhandler, line 36</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/usr/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>2.7.5</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#39;/var/repo/quantum-api/quantum&#39;,
 &#39;/var/repo/quantum-api&#39;,
 &#39;/usr/lib64/python27.zip&#39;,
 &#39;/usr/lib64/python2.7&#39;,
 &#39;/usr/lib64/python2.7/plat-linux2&#39;,
 &#39;/usr/lib64/python2.7/lib-tk&#39;,
 &#39;/usr/lib64/python2.7/lib-old&#39;,
 &#39;/usr/lib64/python2.7/lib-dynload&#39;,
 &#39;/usr/lib64/python2.7/site-packages&#39;,
 &#39;/usr/lib/python2.7/site-packages&#39;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Thu, 26 Oct 2017 16:49:35 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py</code> in <code>inner</code>

          
            <div class="context" id="c140416040014624">
              
                <ol start="32" class="pre-context" id="pre140416040014624">
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    This decorator is automatically applied to all middleware to ensure that</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    no middleware leaks an exception and that the next middleware in the stack</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    can rely on getting a response instead of an exception.</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    @wraps(get_response, assigned=available_attrs(get_response))</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    def inner(request):</pre></li>
                
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="39" class="context-line">
                <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>
            response = get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='40' class="post-context" id="post140416040014624">
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>            response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre>    return inner</pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014624', 'post140416040014624')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014624')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014624">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method WSGIHandler._legacy_get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_legacy_get_response</code>

          
            <div class="context" id="c140416040014552">
              
                <ol start="242" class="pre-context" id="pre140416040014552">
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        # Apply request middleware</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        for middleware_method in self._request_middleware:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            response = middleware_method(request)</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="249" class="context-line">
                <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>
            response = self._get_response(request)</pre> <span>...</span></li></ol>
              
                <ol start='250' class="post-context" id="post140416040014552">
                  
                  <li onclick="toggle('pre140416040014552', 'post140416040014552')"><pre>        return response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014552')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014552">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method SecurityMiddleware.process_request of &lt;django.middleware.security.SecurityMiddleware object at 0x7fb52d1582d0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014480">
              
                <ol start="180" class="pre-context" id="pre140416040014480">
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            except Exception as e:</pre></li>
                
                </ol>
              
              <ol start="187" class="context-line">
                <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>
                response = self.process_exception_by_middleware(e, request)</pre> <span>...</span></li></ol>
              
                <ol start='188' class="post-context" id="post140416040014480">
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>                view_name = callback.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416040014480', 'post140416040014480')"><pre>            else:                                           # CBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014480')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014480">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c140416040014408">
              
                <ol start="178" class="pre-context" id="pre140416040014408">
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            response = middleware_method(request, callback, callback_args, callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="185" class="context-line">
                <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>
                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='186' class="post-context" id="post140416040014408">
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140416040014408', 'post140416040014408')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014408')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014408">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7fb52d152550&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;quantum.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=quantum.api.views.ProjectViewSet, args=(), kwargs={}, url_name=project-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7fb52c6fad50&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py</code> in <code>wrapped_view</code>

          
            <div class="context" id="c140416040014336">
              
                <ol start="51" class="pre-context" id="pre140416040014336">
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    Marks a view function as being exempt from the CSRF view protection.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # We could just do view_func.csrf_exempt = True, but decorators</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # are nicer if they don&#39;t have side-effects, so we return a new</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    # function.</pre></li>
                
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="58" class="context-line">
                <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>
        return view_func(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='59' class="post-context" id="post140416040014336">
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014336', 'post140416040014336')"><pre>    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014336')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014336">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/project/&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function ProjectViewSet at 0x7fb52d60c140&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/viewsets.py</code> in <code>view</code>

          
            <div class="context" id="c140416040014264">
              
                <ol start="76" class="pre-context" id="pre140416040014264">
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # Bind methods to actions</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # This is the bit that&#39;s different to a standard view</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            for method, action in actions.items():</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                handler = getattr(self, action)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>                setattr(self, method, handler)</pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>            # And continue as usual</pre></li>
                
                </ol>
              
              <ol start="83" class="context-line">
                <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>
            return self.dispatch(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='84' class="post-context" id="post140416040014264">
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # and possible attributes set by decorators</pre></li>
                  
                  <li onclick="toggle('pre140416040014264', 'post140416040014264')"><pre>        # like csrf_exempt from dispatch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014264')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014264">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>action</td>
                    <td class="code"><pre>u&#39;list&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>actions</td>
                    <td class="code"><pre>{u&#39;get&#39;: u&#39;list&#39;, u&#39;post&#39;: u&#39;create&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.views.ProjectViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.list of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{u&#39;suffix&#39;: u&#39;List&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>method</td>
                    <td class="code"><pre>u&#39;get&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/project/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014192">
              
                <ol start="476" class="pre-context" id="pre140416040014192">
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="483" class="context-line">
                <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>
            response = self.handle_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='484' class="post-context" id="post140416040014192">
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416040014192', 'post140416040014192')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>handle_exception</code>

          
            <div class="context" id="c140416040014120">
              
                <ol start="436" class="pre-context" id="pre140416040014120">
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        exception_handler = self.get_exception_handler()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        context = self.get_exception_handler_context()</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response = exception_handler(exc, context)</pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="443" class="context-line">
                <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>
            self.raise_uncaught_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='444' class="post-context" id="post140416040014120">
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        response.exception = True</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                  
                  <li onclick="toggle('pre140416040014120', 'post140416040014120')"><pre>        if settings.DEBUG:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014120')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014120">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{u&#39;args&#39;: (),
 u&#39;kwargs&#39;: {},
 u&#39;request&#39;: &lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;,
 u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception_handler</td>
                    <td class="code"><pre>&lt;function exception_handler at 0x7fb52d572050&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c140416040014048">
              
                <ol start="473" class="pre-context" id="pre140416040014048">
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>
            response = handler(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='481' class="post-context" id="post140416040014048">
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre140416040014048', 'post140416040014048')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040014048')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040014048">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method ProjectViewSet.create of &lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>create</code>

          
            <div class="context" id="c140416040013976">
              
                <ol start="14" class="pre-context" id="pre140416040013976">
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>class CreateModelMixin(object):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    Create a model instance.</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                </ol>
              
              <ol start="21" class="context-line">
                <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>
        self.perform_create(serializer)</pre> <span>...</span></li></ol>
              
                <ol start='22' class="post-context" id="post140416040013976">
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>    def perform_create(self, serializer):</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre>        serializer.save()</pre></li>
                  
                  <li onclick="toggle('pre140416040013976', 'post140416040013976')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013976')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013976">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7fb5282f3cd0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/mixins.py</code> in <code>perform_create</code>

          
            <div class="context" id="c140416040013904">
              
                <ol start="19" class="pre-context" id="pre140416040013904">
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        self.perform_create(serializer)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def perform_create(self, serializer):</pre></li>
                
                </ol>
              
              <ol start="26" class="context-line">
                <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>
        serializer.save()</pre> <span>...</span></li></ol>
              
                <ol start='27' class="post-context" id="post140416040013904">
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>    def get_success_headers(self, data):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {&#39;Location&#39;: data[api_settings.URL_FIELD_NAME]}</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>        except (TypeError, KeyError):</pre></li>
                  
                  <li onclick="toggle('pre140416040013904', 'post140416040013904')"><pre>            return {}</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416040013904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416040013904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;quantum.api.views.ProjectViewSet object at 0x7fb52812b210&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib/python2.7/site-packages/rest_framework/serializers.py</code> in <code>save</code>

          
            <div class="context" id="c140416039976832">
              
                <ol start="207" class="pre-context" id="pre140416039976832">
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`update()` did not return an object instance.&#39;</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="214" class="context-line">
                <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>
            self.instance = self.create(validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='215' class="post-context" id="post140416039976832">
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>                &#39;`create()` did not return an object instance.&#39;</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre140416039976832', 'post140416039976832')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976832')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976832">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/var/repo/quantum-api/quantum/api/serializers.py</code> in <code>create</code>

          
            <div class="context" id="c140416039974384">
              
                <ol start="69" class="pre-context" id="pre140416039974384">
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        regions_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        apikeys_data = []</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        project = Project.objects.filter(projectID=projectid).first()</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;regions&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            regions_data = validated_data.pop(&#39;regions&#39;)</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        if &#39;apikeys&#39; in validated_data:</pre></li>
                
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>            apikeys_data = validated_data.pop(&#39;apikeys&#39;)</pre></li>
                
                </ol>
              
              <ol start="76" class="context-line">
                <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>
        project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='77' class="post-context" id="post140416039974384">
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for apikey_data in apikeys_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Apikey.objects.update_or_create(project=project,**apikey_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        for region_data in regions_data:</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>           Region.objects.update_or_create(project=project,region=region_data.get(&#39;region&#39;),defaults=region_data)</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        return project</pre></li>
                  
                  <li onclick="toggle('pre140416039974384', 'post140416039974384')"><pre>        </pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974384')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974384">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>apikeys_data</td>
                    <td class="code"><pre>[OrderedDict([(u&#39;api_user&#39;, u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;), (u&#39;api_key&#39;, u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;)])]</pre></td>
                  </tr>
                
                  <tr>
                    <td>project</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>projectid</td>
                    <td class="code"><pre>u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>regions_data</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>ProjectSerializer(context={u&#39;view&#39;: &lt;quantum.api.views.ProjectViewSet object&gt;, u&#39;request&#39;: &lt;rest_framework.request.Request object&gt;, u&#39;format&#39;: None}, data={u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, u&#39;apikeys&#39;: [{u&#39;api_key&#39;: u&#39;2bv00KfCgHbPKtE7eFGE3CoftowpSj8MVKvr8xvN&#39;, u&#39;api_user&#39;: u&#39;vigdW2SHjH059UmNB0xOb2mFcW7wax3OZcduzPSh&#39;}]}):
    projectID = CharField(label=&#39;ProjectID&#39;, max_length=64)
    domainid = CharField(allow_blank=True, max_length=64, required=False)
    expires = DateTimeField(required=False)
    regions = RegionSerializer(many=True, required=False):
        region = CharField(max_length=32)
        cores = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        gigabytes = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
        ram = IntegerField(max_value=2147483647, min_value=-2147483648, required=False)
    apikeys = ApikeySerializer(many=True, required=False):
        api_user = CharField(max_length=128)
        api_key = CharField(max_length=128)
    centrocusto = CharField(allow_blank=True, allow_null=True, max_length=32, required=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039974312">
              
                <ol start="78" class="pre-context" id="pre140416039974312">
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039974312">
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039974312', 'post140416039974312')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974312')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974312">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;defaults&#39;: {u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;},
 &#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;update_or_create&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d610f10&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>update_or_create</code>

          
            <div class="context" id="c140416039976760">
              
                <ol start="483" class="pre-context" id="pre140416039976760">
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        defaults = defaults or {}</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        lookup, params = self._extract_model_params(defaults, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            obj = self.get(**lookup)</pre></li>
                
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        except self.model.DoesNotExist:</pre></li>
                
                </ol>
              
              <ol start="490" class="context-line">
                <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>
            obj, created = self._create_object_from_params(lookup, params)</pre> <span>...</span></li></ol>
              
                <ol start='491' class="post-context" id="post140416039976760">
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            if created:</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>                return obj, created</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        for k, v in six.iteritems(defaults):</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>            setattr(obj, k, v)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        obj.save(using=self.db)</pre></li>
                  
                  <li onclick="toggle('pre140416039976760', 'post140416039976760')"><pre>        return obj, False</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>defaults</td>
                    <td class="code"><pre>{u&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039976904">
              
                <ol start="506" class="pre-context" id="pre140416039976904">
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            return obj, True</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        except IntegrityError:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            exc_info = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                return self.get(**lookup), False</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>            except self.model.DoesNotExist:</pre></li>
                
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>                pass</pre></li>
                
                </ol>
              
              <ol start="513" class="context-line">
                <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>
            six.reraise(*exc_info)</pre> <span>...</span></li></ol>
              
                <ol start='514' class="post-context" id="post140416039976904">
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>    def _extract_model_params(self, defaults, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        Prepares `lookup` (kwargs that are valid model attributes), `params`</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        (for creating a model instance) based on given kwargs; for use by</pre></li>
                  
                  <li onclick="toggle('pre140416039976904', 'post140416039976904')"><pre>        get_or_create and update_or_create.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039976904')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039976904">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_create_object_from_params</code>

          
            <div class="context" id="c140416039975536">
              
                <ol start="498" class="pre-context" id="pre140416039975536">
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>    def _create_object_from_params(self, lookup, params):</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Tries to create an object using passed params.</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        Used by get_or_create and update_or_create</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            with transaction.atomic(using=self.db):</pre></li>
                
                </ol>
              
              <ol start="505" class="context-line">
                <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>
                obj = self.create(**params)</pre> <span>...</span></li></ol>
              
                <ol start='506' class="post-context" id="post140416039975536">
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            return obj, True</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>        except IntegrityError:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            exc_info = sys.exc_info()</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            try:</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>                return self.get(**lookup), False</pre></li>
                  
                  <li onclick="toggle('pre140416039975536', 'post140416039975536')"><pre>            except self.model.DoesNotExist:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975536')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975536">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc_info</td>
                    <td class="code"><pre>(&lt;class &#39;django.db.utils.IntegrityError&#39;&gt;,
 IntegrityError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;),
 &lt;traceback object at 0x7fb5282efa70&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>lookup</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>create</code>

          
            <div class="context" id="c140416039975464">
              
                <ol start="392" class="pre-context" id="pre140416039975464">
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def create(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        Creates a new object with the given kwargs, saving it to the database</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        and returning the created object.</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="399" class="context-line">
                <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>
        obj.save(force_insert=True, using=self.db)</pre> <span>...</span></li></ol>
              
                <ol start='400' class="post-context" id="post140416039975464">
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>    def _populate_pk_values(self, objs):</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>        for obj in objs:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>            if obj.pk is None:</pre></li>
                  
                  <li onclick="toggle('pre140416039975464', 'post140416039975464')"><pre>                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975464')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975464">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;projectID&#39;: u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save</code>

          
            <div class="context" id="c140416039975392">
              
                <ol start="789" class="pre-context" id="pre140416039975392">
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                if not field.primary_key and not hasattr(field, &#39;through&#39;):</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                    field_names.add(field.attname)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            loaded_fields = field_names.difference(deferred_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        self.save_base(using=using, force_insert=force_insert,</pre></li>
                
                </ol>
              
              <ol start="796" class="context-line">
                <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>
                       force_update=force_update, update_fields=update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='797' class="post-context" id="post140416039975392">
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    save.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>    def save_base(self, raw=False, force_insert=False,</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>                  force_update=False, using=None, update_fields=None):</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975392', 'post140416039975392')"><pre>        Handles the parts of saving which should be done only once per save,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975392')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975392">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>deferred_fields</td>
                    <td class="code"><pre>set()</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>save_base</code>

          
            <div class="context" id="c140416039975320">
              
                <ol start="817" class="pre-context" id="pre140416039975320">
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        meta = cls._meta</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        if not meta.auto_created:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            signals.pre_save.send(sender=origin, instance=self, raw=raw, using=using,</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                                  update_fields=update_fields)</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        with transaction.atomic(using=using, savepoint=False):</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>                self._save_parents(cls, using, update_fields)</pre></li>
                
                </ol>
              
              <ol start="824" class="context-line">
                <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>
            updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='825' class="post-context" id="post140416039975320">
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Store the database on which the object was saved</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.db = using</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Once saved, this is no longer a to-be-added instance.</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        self._state.adding = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975320', 'post140416039975320')"><pre>        # Signal that the save is complete</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975320')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975320">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_save_table</code>

          
            <div class="context" id="c140416039975248">
              
                <ol start="901" class="pre-context" id="pre140416039975248">
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                self._order = order_value</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            fields = meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if not pk_set:</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                fields = [f for f in fields if not isinstance(f, AutoField)]</pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            update_pk = bool(meta.has_auto_field and not pk_set)</pre></li>
                
                </ol>
              
              <ol start="908" class="context-line">
                <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>
            result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</pre> <span>...</span></li></ol>
              
                <ol start='909' class="post-context" id="post140416039975248">
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>            if update_pk:</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>                setattr(self, meta.pk.attname, result)</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        return updated</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):</pre></li>
                  
                  <li onclick="toggle('pre140416039975248', 'post140416039975248')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975248')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975248">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;quantum.api.models.Project&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>f</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: centrocusto&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Project&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/base.py</code> in <code>_do_insert</code>

          
            <div class="context" id="c140416039975176">
              
                <ol start="940" class="pre-context" id="pre140416039975176">
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def _do_insert(self, manager, using, fields, update_pk, raw):</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        Do an INSERT. If update_pk is defined then this method should return</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        the new pk for the model.</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        return manager._insert([self], fields=fields, return_id=update_pk,</pre></li>
                
                </ol>
              
              <ol start="947" class="context-line">
                <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>
                               using=using, raw=raw)</pre> <span>...</span></li></ol>
              
                <ol start='948' class="post-context" id="post140416039975176">
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>    def delete(self, using=None, keep_parents=False):</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        using = using or router.db_for_write(self.__class__, instance=self)</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>        assert self._get_pk_val() is not None, (</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            &quot;%s object can&#39;t be deleted because its %s attribute is set to None.&quot; %</pre></li>
                  
                  <li onclick="toggle('pre140416039975176', 'post140416039975176')"><pre>            (self._meta.object_name, self._meta.pk.attname)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975176')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975176">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Project: Project object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c140416039975104">
              
                <ol start="78" class="pre-context" id="pre140416039975104">
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='86' class="post-context" id="post140416039975104">
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre140416039975104', 'post140416039975104')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975104')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975104">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;Project: Project object&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;fields&#39;: [&lt;django.db.models.fields.CharField: projectID&gt;,
            &lt;django.db.models.fields.DateTimeField: expires&gt;,
            &lt;django.db.models.fields.CharField: domainid&gt;,
            &lt;django.db.models.fields.CharField: centrocusto&gt;],
 &#39;raw&#39;: False,
 &#39;return_id&#39;: True,
 &#39;using&#39;: &#39;default&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;_insert&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7fb52d67d310&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/query.py</code> in <code>_insert</code>

          
            <div class="context" id="c140416039975032">
              
                <ol start="1038" class="pre-context" id="pre140416039975032">
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        the InsertQuery class and is how Model.save() is implemented.</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        if using is None:</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>            using = self.db</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query = sql.InsertQuery(self.model)</pre></li>
                
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1045" class="context-line">
                <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>
        return query.get_compiler(using=using).execute_sql(return_id)</pre> <span>...</span></li></ol>
              
                <ol start='1046' class="post-context" id="post140416039975032">
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>    def _batched_insert(self, objs, fields, batch_size):</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140416039975032', 'post140416039975032')"><pre>        A little helper method for bulk_insert to insert the bulk one batch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039975032')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039975032">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.CharField: projectID&gt;,
 &lt;django.db.models.fields.DateTimeField: expires&gt;,
 &lt;django.db.models.fields.CharField: domainid&gt;,
 &lt;django.db.models.fields.CharField: centrocusto&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;Project: Project object&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0x7fb528303390&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &lt;Project: Project object&gt;, &#39;...(remaining elements truncated)...&#39;]&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py</code> in <code>execute_sql</code>

          
            <div class="context" id="c140416039974960">
              
                <ol start="1047" class="pre-context" id="pre140416039974960">
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        assert not (</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            return_id and len(self.query.objs) != 1 and</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            not self.connection.features.can_return_ids_from_bulk_insert</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        self.return_id = return_id</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            for sql, params in self.as_sql():</pre></li>
                
                </ol>
              
              <ol start="1054" class="context-line">
                <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>
                cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='1055' class="post-context" id="post140416039974960">
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if not (return_id and cursor):</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_ids_from_bulk_insert and len(self.query.objs) &gt; 1:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                return self.connection.ops.fetch_returned_insert_ids(cursor)</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>            if self.connection.features.can_return_id_from_insert:</pre></li>
                  
                  <li onclick="toggle('pre140416039974960', 'post140416039974960')"><pre>                assert len(self.query.objs) == 1</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974960')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974960">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.compiler.SQLInsertCompiler object at 0x7fb528303790&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974888">
              
                <ol start="72" class="pre-context" id="pre140416039974888">
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>class CursorDebugWrapper(CursorWrapper):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    # XXX callproc isn&#39;t instrumented at this time.</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        start = time()</pre></li>
                
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="79" class="context-line">
                <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>
            return super(CursorDebugWrapper, self).execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='80' class="post-context" id="post140416039974888">
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>        finally:</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            stop = time()</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            duration = stop - start</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            sql = self.db.ops.last_executed_query(self.cursor, sql, params)</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>            self.db.queries_log.append({</pre></li>
                  
                  <li onclick="toggle('pre140416039974888', 'post140416039974888')"><pre>                &#39;sql&#39;: sql,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974888')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974888">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>duration</td>
                    <td class="code"><pre>0.00045990943908691406</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>start</td>
                    <td class="code"><pre>1509036575.558545</pre></td>
                  </tr>
                
                  <tr>
                    <td>stop</td>
                    <td class="code"><pre>1509036575.559005</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/utils.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974528">
              
                <ol start="57" class="pre-context" id="pre140416039974528">
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def execute(self, sql, params=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            if params is None:</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>                return self.cursor.execute(sql)</pre></li>
                
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            else:</pre></li>
                
                </ol>
              
              <ol start="64" class="context-line">
                <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>
                return self.cursor.execute(sql, params)</pre> <span>...</span></li></ol>
              
                <ol start='65' class="post-context" id="post140416039974528">
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>    def executemany(self, sql, param_list):</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        self.db.validate_no_broken_transaction()</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>        with self.db.wrap_database_errors:</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre>            return self.cursor.executemany(sql, param_list)</pre></li>
                  
                  <li onclick="toggle('pre140416039974528', 'post140416039974528')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974528')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974528">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7fb528303850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974600">
              
                <ol start="108" class="pre-context" id="pre140416039974600">
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # args is None means no string interpolation</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.execute(query, args)</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                
                </ol>
              
              <ol start="115" class="context-line">
                <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>
                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre> <span>...</span></li></ol>
              
                <ol start='116' class="post-context" id="post140416039974600">
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            raise</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>            return self.cursor.executemany(query, args)</pre></li>
                  
                  <li onclick="toggle('pre140416039974600', 'post140416039974600')"><pre>        except Database.OperationalError as e:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974600')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974600">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974672">
              
                <ol start="103" class="pre-context" id="pre140416039974672">
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def __init__(self, cursor):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        self.cursor = cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre></pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>    def execute(self, query, args=None):</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # args is None means no string interpolation</pre></li>
                
                </ol>
              
              <ol start="110" class="context-line">
                <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>
            return self.cursor.execute(query, args)</pre> <span>...</span></li></ol>
              
                <ol start='111' class="post-context" id="post140416039974672">
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>        except Database.OperationalError as e:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # Map some error codes to IntegrityError, since they seem to be</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            # misclassified and Django would prefer the more logical place.</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            if e.args[0] in self.codes_for_integrityerror:</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>                six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])</pre></li>
                  
                  <li onclick="toggle('pre140416039974672', 'post140416039974672')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974672')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974672">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>e</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>u&#39;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (%s, %s, %s, %s)&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.mysql.base.CursorWrapper object at 0x7fb528303810&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py</code> in <code>execute</code>

          
            <div class="context" id="c140416039974816">
              
                <ol start="198" class="pre-context" id="pre140416039974816">
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>                self.errorhandler(self, TypeError, m)</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except (SystemExit, KeyboardInterrupt):</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            raise</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        except:</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            exc, value, tb = sys.exc_info()</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            del tb</pre></li>
                
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>            self.messages.append((exc, value))</pre></li>
                
                </ol>
              
              <ol start="205" class="context-line">
                <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>
            self.errorhandler(self, exc, value)</pre> <span>...</span></li></ol>
              
                <ol start='206' class="post-context" id="post140416039974816">
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        self._executed = query</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        if not self._defer_warnings: self._warning_check()</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>        return r</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre>    def executemany(self, query, args):</pre></li>
                  
                  <li onclick="toggle('pre140416039974816', 'post140416039974816')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974816')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974816">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>[u&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, None, u&#39;&#39;, None]</pre></td>
                  </tr>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&lt;weakproxy at 0x7fb52d7f88e8 to Connection at 0x7fb5280dd5f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>item</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&quot;INSERT INTO `api_project` (`projectID`, `expires`, `domainid`, `centrocusto`) VALUES (&#39;3fd8578d590c49e89f76a08a4f385d7d&#39;, NULL, &#39;&#39;, NULL)&quot;</pre></td>
                  </tr>
                
                  <tr>
                    <td>r</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;MySQLdb.cursors.Cursor object at 0x7fb5283037d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/lib64/python2.7/site-packages/MySQLdb/connections.py</code> in <code>defaulterrorhandler</code>

          
            <div class="context" id="c140416039974744">
              
                <ol start="29" class="pre-context" id="pre140416039974744">
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    error = errorclass, errorvalue</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    if cursor:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        cursor.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>        connection.messages.append(error)</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del cursor</pre></li>
                
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    del connection</pre></li>
                
                </ol>
              
              <ol start="36" class="context-line">
                <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>
    raise errorclass, errorvalue</pre> <span>...</span></li></ol>
              
                <ol start='37' class="post-context" id="post140416039974744">
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>re_numeric_part = re.compile(r&quot;^(\d+)&quot;)</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>def numeric_part(s):</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre>    &quot;&quot;&quot;Returns the leading numeric part of a string.</pre></li>
                  
                  <li onclick="toggle('pre140416039974744', 'post140416039974744')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140416039974744')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140416039974744">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>error</td>
                    <td class="code"><pre>(&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;,
 OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;))</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorclass</td>
                    <td class="code"><pre>&lt;class &#39;_mysql_exceptions.OperationalError&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>errorvalue</td>
                    <td class="code"><pre>OperationalError(1048, &quot;Column &#39;expires&#39; cannot be null&quot;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="IntegrityError at /project/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: https://quantum.tp.dsi.tecnico.ulisboa.pt/project/

Django Version: 1.10.5
Python Version: 2.7.5
Installed Applications:
(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)
Installed Middleware:
(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)



Traceback:

File "/usr/lib64/python2.7/site-packages/django/core/handlers/exception.py" in inner
  39.             response = get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _legacy_get_response
  249.             response = self._get_response(request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  187.                 response = self.process_exception_by_middleware(e, request)

File "/usr/lib64/python2.7/site-packages/django/core/handlers/base.py" in _get_response
  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/usr/lib64/python2.7/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/viewsets.py" in view
  83.             return self.dispatch(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  483.             response = self.handle_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in handle_exception
  443.             self.raise_uncaught_exception(exc)

File "/usr/lib/python2.7/site-packages/rest_framework/views.py" in dispatch
  480.             response = handler(request, *args, **kwargs)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in create
  21.         self.perform_create(serializer)

File "/usr/lib/python2.7/site-packages/rest_framework/mixins.py" in perform_create
  26.         serializer.save()

File "/usr/lib/python2.7/site-packages/rest_framework/serializers.py" in save
  214.             self.instance = self.create(validated_data)

File "/var/repo/quantum-api/quantum/api/serializers.py" in create
  76.         project, created = Project.objects.update_or_create(projectID=projectid,defaults=validated_data)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in update_or_create
  490.             obj, created = self._create_object_from_params(lookup, params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  513.             six.reraise(*exc_info)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _create_object_from_params
  505.                 obj = self.create(**params)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in create
  399.         obj.save(force_insert=True, using=self.db)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save
  796.                        force_update=force_update, update_fields=update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in save_base
  824.             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _save_table
  908.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/base.py" in _do_insert
  947.                                using=using, raw=raw)

File "/usr/lib64/python2.7/site-packages/django/db/models/manager.py" in manager_method
  85.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/usr/lib64/python2.7/site-packages/django/db/models/query.py" in _insert
  1045.         return query.get_compiler(using=using).execute_sql(return_id)

File "/usr/lib64/python2.7/site-packages/django/db/models/sql/compiler.py" in execute_sql
  1054.                 cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  79.             return super(CursorDebugWrapper, self).execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/utils.py" in execute
  64.                 return self.cursor.execute(sql, params)

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  115.                 six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])

File "/usr/lib64/python2.7/site-packages/django/db/backends/mysql/base.py" in execute
  110.             return self.cursor.execute(query, args)

File "/usr/lib64/python2.7/site-packages/MySQLdb/cursors.py" in execute
  205.             self.errorhandler(self, exc, value)

File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py" in defaulterrorhandler
  36.     raise errorclass, errorvalue

Exception Type: IntegrityError at /project/
Exception Value: (1048, &quot;Column &#39;expires&#39; cannot be null&quot;)
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>AnonymousUser</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#39;393&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#39;application/json&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTEXT_PREFIX</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DOCUMENT_ROOT</td>
          <td class="code"><pre>&#39;/var/www/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>GATEWAY_INTERFACE</td>
          <td class="code"><pre>&#39;CGI/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#39;text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#39;gzip,deflate&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CHARSET</td>
          <td class="code"><pre>&#39;UTF-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#39;keep-alive&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#39;scalaj-http/1.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>u&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_TRANSLATED</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#39;172.20.15.146&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_PORT</td>
          <td class="code"><pre>&#39;50286&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#39;POST&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_SCHEME</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_URI</td>
          <td class="code"><pre>&#39;/project/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_FILENAME</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/wsgi.py&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADDR</td>
          <td class="code"><pre>&#39;193.136.166.56&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_ADMIN</td>
          <td class="code"><pre>&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#39;quantum.tp.dsi.tecnico.ulisboa.pt&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#39;HTTP/1.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SIGNATURE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#39;Apache/2.4.6 (CentOS) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5&#39;</pre></td>
        </tr>
      
        <tr>
          <td>UNIQUE_ID</td>
          <td class="code"><pre>&#39;WfISH26EopjbHFjj@1hSKQAAAAo&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.application_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.callable_object</td>
          <td class="code"><pre>&#39;application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.enable_sendfile</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.handler_script</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.input_chunked</td>
          <td class="code"><pre>&#39;0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_host</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.listener_port</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.process_group</td>
          <td class="code"><pre>&#39;quantum&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.queue_start</td>
          <td class="code"><pre>&#39;1509036575543003&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.request_handler</td>
          <td class="code"><pre>&#39;wsgi-script&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.script_reloading</td>
          <td class="code"><pre>&#39;1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>mod_wsgi.version</td>
          <td class="code"><pre>(3, 4)</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;mod_wsgi.Log object at 0x7fb52812ba30&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;mod_wsgi.Input object at 0x7fb52d7f36f0&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>quantum.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#39;*&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[u&#39;django.contrib.auth.backends.ModelBackend&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>u&#39;auth.User&#39;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{u&#39;default&#39;: {u&#39;BACKEND&#39;: u&#39;django.core.cache.backends.locmem.LocMemCache&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;csrftoken&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>u&#39;django.views.csrf.csrf_failure&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>u&#39;HTTP_X_CSRFTOKEN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: False,
             &#39;AUTOCOMMIT&#39;: True,
             &#39;CONN_MAX_AGE&#39;: 0,
             &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
             &#39;HOST&#39;: &#39;localhost&#39;,
             &#39;NAME&#39;: &#39;quantumapi&#39;,
             &#39;OPTIONS&#39;: {&#39;init_command&#39;: &quot;SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;&quot;},
             &#39;PASSWORD&#39;: u&#39;********************&#39;,
             &#39;PORT&#39;: &#39;3306&#39;,
             &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                      &#39;COLLATION&#39;: None,
                      &#39;MIRROR&#39;: None,
                      &#39;NAME&#39;: None},
             &#39;TIME_ZONE&#39;: None,
             &#39;USER&#39;: &#39;root&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y, P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d %H:%M:%S&#39;,
 u&#39;%Y-%m-%d %H:%M:%S.%f&#39;,
 u&#39;%Y-%m-%d %H:%M&#39;,
 u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y %H:%M:%S&#39;,
 u&#39;%m/%d/%Y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%Y %H:%M&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y %H:%M:%S&#39;,
 u&#39;%m/%d/%y %H:%M:%S.%f&#39;,
 u&#39;%m/%d/%y %H:%M&#39;,
 u&#39;%m/%d/%y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>u&#39;N j, Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%Y-%m-%d&#39;,
 u&#39;%m/%d/%Y&#39;,
 u&#39;%m/%d/%y&#39;,
 u&#39;%b %d %Y&#39;,
 u&#39;%b %d, %Y&#39;,
 u&#39;%d %b %Y&#39;,
 u&#39;%d %b, %Y&#39;,
 u&#39;%B %d %Y&#39;,
 u&#39;%B %d, %Y&#39;,
 u&#39;%d %B %Y&#39;,
 u&#39;%d %B, %Y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>u&#39;.&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CONTENT_TYPE</td>
          <td class="code"><pre>u&#39;text/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>u&#39;django.views.debug.SafeExceptionReporterFilter&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>u&#39;django.core.files.storage.FileSystemStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>u&#39;webmaster@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.mail.backends.smtp.EmailBackend&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>u&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>u&#39;[Django] &#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_CHARSET</td>
          <td class="code"><pre>u&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[u&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;,
 u&#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;quantum.api&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(u&#39;af&#39;, u&#39;Afrikaans&#39;),
 (u&#39;ar&#39;, u&#39;Arabic&#39;),
 (u&#39;ast&#39;, u&#39;Asturian&#39;),
 (u&#39;az&#39;, u&#39;Azerbaijani&#39;),
 (u&#39;bg&#39;, u&#39;Bulgarian&#39;),
 (u&#39;be&#39;, u&#39;Belarusian&#39;),
 (u&#39;bn&#39;, u&#39;Bengali&#39;),
 (u&#39;br&#39;, u&#39;Breton&#39;),
 (u&#39;bs&#39;, u&#39;Bosnian&#39;),
 (u&#39;ca&#39;, u&#39;Catalan&#39;),
 (u&#39;cs&#39;, u&#39;Czech&#39;),
 (u&#39;cy&#39;, u&#39;Welsh&#39;),
 (u&#39;da&#39;, u&#39;Danish&#39;),
 (u&#39;de&#39;, u&#39;German&#39;),
 (u&#39;dsb&#39;, u&#39;Lower Sorbian&#39;),
 (u&#39;el&#39;, u&#39;Greek&#39;),
 (u&#39;en&#39;, u&#39;English&#39;),
 (u&#39;en-au&#39;, u&#39;Australian English&#39;),
 (u&#39;en-gb&#39;, u&#39;British English&#39;),
 (u&#39;eo&#39;, u&#39;Esperanto&#39;),
 (u&#39;es&#39;, u&#39;Spanish&#39;),
 (u&#39;es-ar&#39;, u&#39;Argentinian Spanish&#39;),
 (u&#39;es-co&#39;, u&#39;Colombian Spanish&#39;),
 (u&#39;es-mx&#39;, u&#39;Mexican Spanish&#39;),
 (u&#39;es-ni&#39;, u&#39;Nicaraguan Spanish&#39;),
 (u&#39;es-ve&#39;, u&#39;Venezuelan Spanish&#39;),
 (u&#39;et&#39;, u&#39;Estonian&#39;),
 (u&#39;eu&#39;, u&#39;Basque&#39;),
 (u&#39;fa&#39;, u&#39;Persian&#39;),
 (u&#39;fi&#39;, u&#39;Finnish&#39;),
 (u&#39;fr&#39;, u&#39;French&#39;),
 (u&#39;fy&#39;, u&#39;Frisian&#39;),
 (u&#39;ga&#39;, u&#39;Irish&#39;),
 (u&#39;gd&#39;, u&#39;Scottish Gaelic&#39;),
 (u&#39;gl&#39;, u&#39;Galician&#39;),
 (u&#39;he&#39;, u&#39;Hebrew&#39;),
 (u&#39;hi&#39;, u&#39;Hindi&#39;),
 (u&#39;hr&#39;, u&#39;Croatian&#39;),
 (u&#39;hsb&#39;, u&#39;Upper Sorbian&#39;),
 (u&#39;hu&#39;, u&#39;Hungarian&#39;),
 (u&#39;ia&#39;, u&#39;Interlingua&#39;),
 (u&#39;id&#39;, u&#39;Indonesian&#39;),
 (u&#39;io&#39;, u&#39;Ido&#39;),
 (u&#39;is&#39;, u&#39;Icelandic&#39;),
 (u&#39;it&#39;, u&#39;Italian&#39;),
 (u&#39;ja&#39;, u&#39;Japanese&#39;),
 (u&#39;ka&#39;, u&#39;Georgian&#39;),
 (u&#39;kk&#39;, u&#39;Kazakh&#39;),
 (u&#39;km&#39;, u&#39;Khmer&#39;),
 (u&#39;kn&#39;, u&#39;Kannada&#39;),
 (u&#39;ko&#39;, u&#39;Korean&#39;),
 (u&#39;lb&#39;, u&#39;Luxembourgish&#39;),
 (u&#39;lt&#39;, u&#39;Lithuanian&#39;),
 (u&#39;lv&#39;, u&#39;Latvian&#39;),
 (u&#39;mk&#39;, u&#39;Macedonian&#39;),
 (u&#39;ml&#39;, u&#39;Malayalam&#39;),
 (u&#39;mn&#39;, u&#39;Mongolian&#39;),
 (u&#39;mr&#39;, u&#39;Marathi&#39;),
 (u&#39;my&#39;, u&#39;Burmese&#39;),
 (u&#39;nb&#39;, u&#39;Norwegian Bokm\xe5l&#39;),
 (u&#39;ne&#39;, u&#39;Nepali&#39;),
 (u&#39;nl&#39;, u&#39;Dutch&#39;),
 (u&#39;nn&#39;, u&#39;Norwegian Nynorsk&#39;),
 (u&#39;os&#39;, u&#39;Ossetic&#39;),
 (u&#39;pa&#39;, u&#39;Punjabi&#39;),
 (u&#39;pl&#39;, u&#39;Polish&#39;),
 (u&#39;pt&#39;, u&#39;Portuguese&#39;),
 (u&#39;pt-br&#39;, u&#39;Brazilian Portuguese&#39;),
 (u&#39;ro&#39;, u&#39;Romanian&#39;),
 (u&#39;ru&#39;, u&#39;Russian&#39;),
 (u&#39;sk&#39;, u&#39;Slovak&#39;),
 (u&#39;sl&#39;, u&#39;Slovenian&#39;),
 (u&#39;sq&#39;, u&#39;Albanian&#39;),
 (u&#39;sr&#39;, u&#39;Serbian&#39;),
 (u&#39;sr-latn&#39;, u&#39;Serbian Latin&#39;),
 (u&#39;sv&#39;, u&#39;Swedish&#39;),
 (u&#39;sw&#39;, u&#39;Swahili&#39;),
 (u&#39;ta&#39;, u&#39;Tamil&#39;),
 (u&#39;te&#39;, u&#39;Telugu&#39;),
 (u&#39;th&#39;, u&#39;Thai&#39;),
 (u&#39;tr&#39;, u&#39;Turkish&#39;),
 (u&#39;tt&#39;, u&#39;Tatar&#39;),
 (u&#39;udm&#39;, u&#39;Udmurt&#39;),
 (u&#39;uk&#39;, u&#39;Ukrainian&#39;),
 (u&#39;ur&#39;, u&#39;Urdu&#39;),
 (u&#39;vi&#39;, u&#39;Vietnamese&#39;),
 (u&#39;zh-hans&#39;, u&#39;Simplified Chinese&#39;),
 (u&#39;zh-hant&#39;, u&#39;Traditional Chinese&#39;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[u&#39;he&#39;, u&#39;ar&#39;, u&#39;fa&#39;, u&#39;ur&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#39;en-us&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;django_language&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>u&#39;logging.config.dictConfig&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>u&#39;/accounts/profile/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>u&#39;/accounts/login/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>u&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE_CLASSES</td>
          <td class="code"><pre>(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>u&#39;F j&#39;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#39;PAGE_SIZE&#39;: 10}</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#39;quantum.urls&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>u&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>u&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>u&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>u&#39;sessionid&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>u&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.backends.db&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>u&#39;django.contrib.sessions.serializers.JSONSerializer&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#39;quantum.settings&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>u&#39;m/d/Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>u&#39;django.core.signing.TimestampSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[u&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,
 u&#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>u&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#39;/var/repo/quantum-api/quantum/static&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#39;/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#39;APP_DIRS&#39;: True,
  &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
  &#39;DIRS&#39;: [],
  &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;,
                                     &#39;django.template.context_processors.request&#39;,
                                     &#39;django.contrib.auth.context_processors.auth&#39;,
                                     &#39;django.contrib.messages.context_processors.messages&#39;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>u&#39;django.test.runner.DiscoverRunner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>u&#39;,&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>u&#39;P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[u&#39;%H:%M:%S&#39;, u&#39;%H:%M:%S.%f&#39;, u&#39;%H:%M&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#39;UTC&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_ETAGS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#39;quantum.wsgi.application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>u&#39;SAMEORIGIN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>u&#39;F Y&#39;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>

	at openstacklib.Request.postNoAuth(Request.scala:64)
	at openstacklib.Quantum$$anonfun$addApiKey$1.apply$mcV$sp(Quantum.scala:103)
	at openstacklib.Template.ErrorGoodTemplate(Template.scala:39)
	at openstacklib.Quantum.addApiKey(Quantum.scala:101)
	at openstacklib.Command.generateApiKey(Command.scala:231)
	at openstacklib.TecnicoOpenStack.generateApiKey(TecnicoOpenStack.scala:209)
	at openstackcli.Main$$anonfun$9.apply$mcV$sp(Main.scala:363)
	at openstackcli.Cli$$anon$1.run(Cli.scala:100)
